{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cheguei, cad\u00ea os aplausos? Bem-vindo ao Reposit\u00f3rio da 8SOAT - P\u00f3s Tech de Arquitetura de Software na FIAP Este espa\u00e7o foi criado com o objetivo de facilitar o compartilhamento de conhecimento, anota\u00e7\u00f5es e refer\u00eancias \u00fateis para todos os colegas de turma. Aqui voc\u00ea encontrar\u00e1: Anota\u00e7\u00f5es de Aula: Resumos e pontos importantes discutidos em nossas aulas. Indica\u00e7\u00f5es de Livros: Sugest\u00f5es de leitura que complementam nosso aprendizado. Artigos e Publica\u00e7\u00f5es: Artigos acad\u00eamicos e publica\u00e7\u00f5es relevantes sobre arquitetura de software. Ferramentas \u00dateis: Recomenda\u00e7\u00f5es de ferramentas e software que podem auxiliar no desenvolvimento e an\u00e1lise de arquiteturas. Links Interessantes: Links para blogs, v\u00eddeos e outros recursos online que valem a pena conferir. Nosso objetivo \u00e9 criar um ambiente colaborativo onde todos possam contribuir e aprender juntos. Se voc\u00ea tiver anota\u00e7\u00f5es, sugest\u00f5es de livros, artigos ou qualquer outro material que possa ser \u00fatil, sinta-se \u00e0 vontade para compartilhar! Indica\u00e7\u00f5es de Livros Deixamos este espa\u00e7o para a indica\u00e7\u00e3o de livros que achamos essenciais na jornada da pessoa arquiteta de software: T\u00edtulo Autor Sugest\u00e3o de compra Learning Domain-Driven Design Vlad Khononov amazon Writing Effective Use Cases Alistair Cockburn amazon Implementing Domain-Driven Design Vaughn Vernon amazon Arquitetura Limpa Robert C. Martin amazon Como contribuir? Este \u00e9 um espa\u00e7o colaborativo, ent\u00e3o encorajamos todos a contribuir! Voc\u00ea pode adicionar suas anota\u00e7\u00f5es, sugest\u00f5es de leitura, links interessantes e qualquer outro recurso que achar relevante. Juntos, podemos criar uma base de conhecimento rica e diversificada. Envie um Pull Request no reposit\u00f3rio deste projeto Esperamos que este reposit\u00f3rio seja \u00fatil para todos e que possamos aproveitar ao m\u00e1ximo esta jornada de aprendizado! Bons estudos a todos! Para onde ir agora? Domain Driven Design Docker Arquitetura de Software Arquitetura Limpa (Clean Architecture) Kubernetes","title":"In\u00edcio"},{"location":"#cheguei-cade-os-aplausos","text":"Bem-vindo ao Reposit\u00f3rio da 8SOAT - P\u00f3s Tech de Arquitetura de Software na FIAP Este espa\u00e7o foi criado com o objetivo de facilitar o compartilhamento de conhecimento, anota\u00e7\u00f5es e refer\u00eancias \u00fateis para todos os colegas de turma. Aqui voc\u00ea encontrar\u00e1: Anota\u00e7\u00f5es de Aula: Resumos e pontos importantes discutidos em nossas aulas. Indica\u00e7\u00f5es de Livros: Sugest\u00f5es de leitura que complementam nosso aprendizado. Artigos e Publica\u00e7\u00f5es: Artigos acad\u00eamicos e publica\u00e7\u00f5es relevantes sobre arquitetura de software. Ferramentas \u00dateis: Recomenda\u00e7\u00f5es de ferramentas e software que podem auxiliar no desenvolvimento e an\u00e1lise de arquiteturas. Links Interessantes: Links para blogs, v\u00eddeos e outros recursos online que valem a pena conferir. Nosso objetivo \u00e9 criar um ambiente colaborativo onde todos possam contribuir e aprender juntos. Se voc\u00ea tiver anota\u00e7\u00f5es, sugest\u00f5es de livros, artigos ou qualquer outro material que possa ser \u00fatil, sinta-se \u00e0 vontade para compartilhar!","title":"Cheguei, cad\u00ea os aplausos?"},{"location":"#indicacoes-de-livros","text":"Deixamos este espa\u00e7o para a indica\u00e7\u00e3o de livros que achamos essenciais na jornada da pessoa arquiteta de software: T\u00edtulo Autor Sugest\u00e3o de compra Learning Domain-Driven Design Vlad Khononov amazon Writing Effective Use Cases Alistair Cockburn amazon Implementing Domain-Driven Design Vaughn Vernon amazon Arquitetura Limpa Robert C. Martin amazon","title":"Indica\u00e7\u00f5es de Livros"},{"location":"#como-contribuir","text":"Este \u00e9 um espa\u00e7o colaborativo, ent\u00e3o encorajamos todos a contribuir! Voc\u00ea pode adicionar suas anota\u00e7\u00f5es, sugest\u00f5es de leitura, links interessantes e qualquer outro recurso que achar relevante. Juntos, podemos criar uma base de conhecimento rica e diversificada. Envie um Pull Request no reposit\u00f3rio deste projeto Esperamos que este reposit\u00f3rio seja \u00fatil para todos e que possamos aproveitar ao m\u00e1ximo esta jornada de aprendizado! Bons estudos a todos!","title":"Como contribuir?"},{"location":"#para-onde-ir-agora","text":"","title":"Para onde ir agora?"},{"location":"#domain-driven-design","text":"","title":"Domain Driven Design"},{"location":"#docker","text":"","title":"Docker"},{"location":"#arquitetura-de-software","text":"","title":"Arquitetura de Software"},{"location":"#arquitetura-limpa-clean-architecture","text":"","title":"Arquitetura Limpa (Clean Architecture)"},{"location":"#kubernetes","text":"","title":"Kubernetes"},{"location":"about/","text":"Quem sou eu Eu sou um projeto para ajudar nas anota\u00e7\u00f5es de estudos do curso de arquitetura de software que est\u00e1 sendo ministrado na FIAP em 2024 na modalidade EAD. A inten\u00e7\u00e3o deste projeto \u00e9 ser colaborativo, portanto, se voc\u00ea procura uma lista de nomes, n\u00e3o procure.","title":"Sobre"},{"location":"about/#quem-sou-eu","text":"Eu sou um projeto para ajudar nas anota\u00e7\u00f5es de estudos do curso de arquitetura de software que est\u00e1 sendo ministrado na FIAP em 2024 na modalidade EAD. A inten\u00e7\u00e3o deste projeto \u00e9 ser colaborativo, portanto, se voc\u00ea procura uma lista de nomes, n\u00e3o procure.","title":"Quem sou eu"},{"location":"clean-architecture/","text":"Arquitetura Limpa (Clean Architecture) Introdu\u00e7\u00e3o Criador: Robert C. Martin, tamb\u00e9m conhecido como \"Uncle Bob\". Conceito: O termo \"limpo\" (clean) significa claro, organizado e objetivo. A ideia n\u00e3o \u00e9 sugerir que outras arquiteturas s\u00e3o \"sujas\", mas sim enfatizar a clareza e a objetividade no c\u00f3digo. Objetivo: Aumentar a qualidade do c\u00f3digo, facilitando a manuten\u00e7\u00e3o e evitando problemas para o desenvolvedor ao resolver os problemas do cliente. Filosofia: \"N\u00f3s lemos mais c\u00f3digo do que escrevemos\", o que refor\u00e7a a import\u00e2ncia de escrever c\u00f3digo claro e organizado. Princ\u00edpios Fundamentais Separa\u00e7\u00e3o de Responsabilidades: O c\u00f3digo deve ser fragmentado em componentes especializados, onde cada componente tem uma \u00fanica responsabilidade. Hierarquia de Componentes: Arquitetura: Define como os componentes s\u00e3o utilizados. Componentes: Representam como o c\u00f3digo \u00e9 organizado. C\u00f3digo: Detalha o que realmente \u00e9 feito. Princ\u00edpios S.O.L.I.D Single Responsibility Principle (SRP): Cada componente ou classe deve ter apenas uma \u00fanica raz\u00e3o para mudar, ou seja, uma \u00fanica responsabilidade. Open/Closed Principle (OCP): Os componentes devem ser fechados para modifica\u00e7\u00e3o, mas abertos para extens\u00e3o. Liskov Substitution Principle (LSP): Os componentes podem ser substitu\u00eddos por seus subtipos sem afetar a execu\u00e7\u00e3o correta do programa. Interface Segregation Principle (ISP): As interfaces devem ser espec\u00edficas e focadas, evitando sobrecarga de responsabilidades e implementa\u00e7\u00f5es desnecess\u00e1rias. Dependency Inversion Principle (DIP): Os componentes devem depender de abstra\u00e7\u00f5es (interfaces) e n\u00e3o de implementa\u00e7\u00f5es concretas. Isso permite que eles recebam suas depend\u00eancias j\u00e1 criadas, sem se preocupar com a inst\u00e2ncia. Estrutura das Camadas Independ\u00eancia das Camadas: Cada camada deve funcionar de forma independente das outras, seguindo sempre um fluxo de fora para dentro. Das camadas de n\u00edvel mais alto (internas) para as de n\u00edvel mais baixo (internas) em abstra\u00e7\u00e3o Entidades Defini\u00e7\u00e3o: Elementos centrais que participam dos casos de uso. Fun\u00e7\u00e3o: Representar as regras de neg\u00f3cio e os dados da aplica\u00e7\u00e3o. Casos de Uso Fun\u00e7\u00e3o: Coordenar as entidades para realizar cen\u00e1rios espec\u00edficos de uso. Podem se comunicar entre si. Exemplo: Caso de uso \"Iniciar Venda\": Cria o vendedor. Cria a venda associada ao vendedor. Servi\u00e7os e Camadas Externas Controllers, Gateways e Presenters: Controller: Serve como ponto de entrada, chamado por um servi\u00e7o externo (API, dispositivo, web). N\u00e3o \u00e9 o mesmo \"controller\" do MVC. Gateway: Atua como intermedi\u00e1rio entre o banco de dados e os casos de uso, fornecendo os dados necess\u00e1rios. Presenter: Cuida do formato de sa\u00edda dos dados, preparando-os para a apresenta\u00e7\u00e3o. Decis\u00f5es de Arquitetura Infraestrutura: Decis\u00f5es sobre infraestrutura, como armazenamento de dados e tr\u00e1fego, devem ser mantidas fora do dom\u00ednio central da aplica\u00e7\u00e3o.","title":"Arquitetura Limpa"},{"location":"clean-architecture/#arquitetura-limpa-clean-architecture","text":"","title":"Arquitetura Limpa (Clean Architecture)"},{"location":"clean-architecture/#introducao","text":"Criador: Robert C. Martin, tamb\u00e9m conhecido como \"Uncle Bob\". Conceito: O termo \"limpo\" (clean) significa claro, organizado e objetivo. A ideia n\u00e3o \u00e9 sugerir que outras arquiteturas s\u00e3o \"sujas\", mas sim enfatizar a clareza e a objetividade no c\u00f3digo. Objetivo: Aumentar a qualidade do c\u00f3digo, facilitando a manuten\u00e7\u00e3o e evitando problemas para o desenvolvedor ao resolver os problemas do cliente. Filosofia: \"N\u00f3s lemos mais c\u00f3digo do que escrevemos\", o que refor\u00e7a a import\u00e2ncia de escrever c\u00f3digo claro e organizado.","title":"Introdu\u00e7\u00e3o"},{"location":"clean-architecture/#principios-fundamentais","text":"Separa\u00e7\u00e3o de Responsabilidades: O c\u00f3digo deve ser fragmentado em componentes especializados, onde cada componente tem uma \u00fanica responsabilidade. Hierarquia de Componentes: Arquitetura: Define como os componentes s\u00e3o utilizados. Componentes: Representam como o c\u00f3digo \u00e9 organizado. C\u00f3digo: Detalha o que realmente \u00e9 feito.","title":"Princ\u00edpios Fundamentais"},{"location":"clean-architecture/#principios-solid","text":"","title":"Princ\u00edpios S.O.L.I.D"},{"location":"clean-architecture/#single-responsibility-principle-srp","text":"Cada componente ou classe deve ter apenas uma \u00fanica raz\u00e3o para mudar, ou seja, uma \u00fanica responsabilidade.","title":"Single Responsibility Principle (SRP):"},{"location":"clean-architecture/#openclosed-principle-ocp","text":"Os componentes devem ser fechados para modifica\u00e7\u00e3o, mas abertos para extens\u00e3o.","title":"Open/Closed Principle (OCP):"},{"location":"clean-architecture/#liskov-substitution-principle-lsp","text":"Os componentes podem ser substitu\u00eddos por seus subtipos sem afetar a execu\u00e7\u00e3o correta do programa.","title":"Liskov Substitution Principle (LSP):"},{"location":"clean-architecture/#interface-segregation-principle-isp","text":"As interfaces devem ser espec\u00edficas e focadas, evitando sobrecarga de responsabilidades e implementa\u00e7\u00f5es desnecess\u00e1rias.","title":"Interface Segregation Principle (ISP):"},{"location":"clean-architecture/#dependency-inversion-principle-dip","text":"Os componentes devem depender de abstra\u00e7\u00f5es (interfaces) e n\u00e3o de implementa\u00e7\u00f5es concretas. Isso permite que eles recebam suas depend\u00eancias j\u00e1 criadas, sem se preocupar com a inst\u00e2ncia.","title":"Dependency Inversion Principle (DIP):"},{"location":"clean-architecture/#estrutura-das-camadas","text":"Independ\u00eancia das Camadas: Cada camada deve funcionar de forma independente das outras, seguindo sempre um fluxo de fora para dentro. Das camadas de n\u00edvel mais alto (internas) para as de n\u00edvel mais baixo (internas) em abstra\u00e7\u00e3o","title":"Estrutura das Camadas"},{"location":"clean-architecture/#entidades","text":"Defini\u00e7\u00e3o: Elementos centrais que participam dos casos de uso. Fun\u00e7\u00e3o: Representar as regras de neg\u00f3cio e os dados da aplica\u00e7\u00e3o.","title":"Entidades"},{"location":"clean-architecture/#casos-de-uso","text":"Fun\u00e7\u00e3o: Coordenar as entidades para realizar cen\u00e1rios espec\u00edficos de uso. Podem se comunicar entre si. Exemplo: Caso de uso \"Iniciar Venda\": Cria o vendedor. Cria a venda associada ao vendedor.","title":"Casos de Uso"},{"location":"clean-architecture/#servicos-e-camadas-externas","text":"Controllers, Gateways e Presenters: Controller: Serve como ponto de entrada, chamado por um servi\u00e7o externo (API, dispositivo, web). N\u00e3o \u00e9 o mesmo \"controller\" do MVC. Gateway: Atua como intermedi\u00e1rio entre o banco de dados e os casos de uso, fornecendo os dados necess\u00e1rios. Presenter: Cuida do formato de sa\u00edda dos dados, preparando-os para a apresenta\u00e7\u00e3o.","title":"Servi\u00e7os e Camadas Externas"},{"location":"clean-architecture/#decisoes-de-arquitetura","text":"Infraestrutura: Decis\u00f5es sobre infraestrutura, como armazenamento de dados e tr\u00e1fego, devem ser mantidas fora do dom\u00ednio central da aplica\u00e7\u00e3o.","title":"Decis\u00f5es de Arquitetura"},{"location":"ddd/","text":"Qual Aula voc\u00ea est\u00e1 procurando? Aula 1 - Introdu\u00e7\u00e3o Aula 2 - Domain Storytelling Aula 3 - Descoberta e Forma\u00e7\u00e3o de Conhecimento Aula 4 - Trabalhando com Contextos Delimitados Aula 5 - Design T\u00e1tico Aula 6 - Event Storming Aula 7 - Levantamento de Requisitos Aula 8 - Refinamento T\u00e9cnico Aula 9 - Definition of Ready e Definition of Done","title":"Domain Driven Design"},{"location":"ddd/#qual-aula-voce-esta-procurando","text":"","title":"Qual Aula voc\u00ea est\u00e1 procurando?"},{"location":"ddd/#aula-1-introducao","text":"","title":"Aula 1 - Introdu\u00e7\u00e3o"},{"location":"ddd/#aula-2-domain-storytelling","text":"","title":"Aula 2 - Domain Storytelling"},{"location":"ddd/#aula-3-descoberta-e-formacao-de-conhecimento","text":"","title":"Aula 3 - Descoberta e Forma\u00e7\u00e3o de Conhecimento"},{"location":"ddd/#aula-4-trabalhando-com-contextos-delimitados","text":"","title":"Aula 4 - Trabalhando com Contextos Delimitados"},{"location":"ddd/#aula-5-design-tatico","text":"","title":"Aula 5 - Design T\u00e1tico"},{"location":"ddd/#aula-6-event-storming","text":"","title":"Aula 6 - Event Storming"},{"location":"ddd/#aula-7-levantamento-de-requisitos","text":"","title":"Aula 7 - Levantamento de Requisitos"},{"location":"ddd/#aula-8-refinamento-tecnico","text":"","title":"Aula 8 - Refinamento T\u00e9cnico"},{"location":"ddd/#aula-9-definition-of-ready-e-definition-of-done","text":"","title":"Aula 9 - Definition of Ready e Definition of Done"},{"location":"ddd/definition_of_ready_and_done/","text":"Definition of Ready e Definition of Done S\u00e3o pontos cruciais para definir se as tarefas est\u00e3o prontas para desenvolvimento e para release. Chamamos estes pontos de crit\u00e9rios e aceite. Definition of Ready (upstream) Crit\u00e9rios que devem ser atendidos para considerar que a tarefa pode ser implementada. Exemplo: - Documento de requisitos - Hist\u00f3rias de usu\u00e1rio est\u00e3o claramente escritas, deixando claro o objetivo a ser alcan\u00e7ado e o porque \u00e9 valioso para o cliente - Crit\u00e9rios de aceita\u00e7\u00e3o bem definidos - Refinamento t\u00e9cnico - Arquitetura da solu\u00e7\u00e3o desenhada - Quebra de itens de desenvolvimento - Estimativa das Demandas - Prioriza\u00e7\u00e3o feita pelo respons\u00e1vel pelo produto - Identifica\u00e7\u00e3o das depend\u00eancias das tarefas - Compreens\u00e3o da equipe Definition of Done (downstream) Crit\u00e9rios que devem ser atendidos para considerar que a tarefa foi conclu\u00edda. Exemplo: - Code Review - Testes unit\u00e1rios - Integra\u00e7\u00e3o cont\u00ednua - Aprova\u00e7\u00e3o da esteira de qualidade - Documenta\u00e7\u00e3o atualizada - Valida\u00e7\u00e3o com usu\u00e1rio final Estimativa usando Fibonacci Utilizando uma escala de fibonacci, os pontos representam o esfor\u00e7o empregado na implementa\u00e7\u00e3o Estimativa usando Monte Carlo \u00c9 verificado a quantidade de itens entregues em um % de sprints. Desta forma, podemos ser mais assertivos considerando o passado do time.","title":"Definition of Ready e Definition of Done"},{"location":"ddd/definition_of_ready_and_done/#definition-of-ready-e-definition-of-done","text":"S\u00e3o pontos cruciais para definir se as tarefas est\u00e3o prontas para desenvolvimento e para release. Chamamos estes pontos de crit\u00e9rios e aceite.","title":"Definition of Ready e Definition of Done"},{"location":"ddd/definition_of_ready_and_done/#definition-of-ready-upstream","text":"Crit\u00e9rios que devem ser atendidos para considerar que a tarefa pode ser implementada. Exemplo: - Documento de requisitos - Hist\u00f3rias de usu\u00e1rio est\u00e3o claramente escritas, deixando claro o objetivo a ser alcan\u00e7ado e o porque \u00e9 valioso para o cliente - Crit\u00e9rios de aceita\u00e7\u00e3o bem definidos - Refinamento t\u00e9cnico - Arquitetura da solu\u00e7\u00e3o desenhada - Quebra de itens de desenvolvimento - Estimativa das Demandas - Prioriza\u00e7\u00e3o feita pelo respons\u00e1vel pelo produto - Identifica\u00e7\u00e3o das depend\u00eancias das tarefas - Compreens\u00e3o da equipe","title":"Definition of Ready (upstream)"},{"location":"ddd/definition_of_ready_and_done/#definition-of-done-downstream","text":"Crit\u00e9rios que devem ser atendidos para considerar que a tarefa foi conclu\u00edda. Exemplo: - Code Review - Testes unit\u00e1rios - Integra\u00e7\u00e3o cont\u00ednua - Aprova\u00e7\u00e3o da esteira de qualidade - Documenta\u00e7\u00e3o atualizada - Valida\u00e7\u00e3o com usu\u00e1rio final","title":"Definition of Done (downstream)"},{"location":"ddd/definition_of_ready_and_done/#estimativa-usando-fibonacci","text":"Utilizando uma escala de fibonacci, os pontos representam o esfor\u00e7o empregado na implementa\u00e7\u00e3o","title":"Estimativa usando Fibonacci"},{"location":"ddd/definition_of_ready_and_done/#estimativa-usando-monte-carlo","text":"\u00c9 verificado a quantidade de itens entregues em um % de sprints. Desta forma, podemos ser mais assertivos considerando o passado do time.","title":"Estimativa usando Monte Carlo"},{"location":"ddd/discovery_and_knowledge/","text":"Descoberta e Forma\u00e7\u00e3o de Conhecimento Dicion\u00e1rio e L\u00ednguagem ub\u00edqua \u00c9 a linguagem do neg\u00f3cio, a usada no dia-a-dia. Dessa forma, todos devem utilizar a mesma linguagem, nada de termos t\u00e9cnicos e outros termos espec\u00edficos. Anota\u00e7\u00f5es/Dicion\u00e1rio: Explica\u00e7\u00f5es sobre quem s\u00e3o os atores e termos do dia-a-dia. Dependendo por subdom\u00ednio (contexto), a mesma pessoa pode ter nomes diferentes. Modelagem de Dom\u00ednio Abstra\u00e7\u00e3o de um processo do qual resolve um problema. Extra\u00eddo apenas o essencial para que o problema seja resolvido, ou seja, remover do escopo detalhes que n\u00e3o agregam. Onde guardar? Wikis Jira, Notion... Gest\u00e3o de Projetos Trello Reposit\u00f3rios Git (versionadores de c\u00f3digo ou softwares muito t\u00e9cnicos n\u00e3o s\u00e3o muito recomendados, pois estes documentos ser\u00e3o acessados/editados n\u00e3o necessariamente por pessoas t\u00e9cnicas) Contextos Delimitados A linguagem Ub\u00edqua \u00e9 uma \u00f3tima metrica. Se \u00e9 a mesma terminologia em dois contextos e tratam de formas muito parecidas pode ser uma boa ideia juntar O numero de contextos pode mostrar o numero de times que far\u00e3o parte da equipe de desenvolvimento Um time pode trabalhar em N contextos delimitados, mas um contexto delimitado s\u00f3 pode ser trabalhado por um \u00fanico time","title":"Descoberta e Forma\u00e7\u00e3o de Conhecimento"},{"location":"ddd/discovery_and_knowledge/#descoberta-e-formacao-de-conhecimento","text":"","title":"Descoberta e Forma\u00e7\u00e3o de Conhecimento"},{"location":"ddd/discovery_and_knowledge/#dicionario-e-linguagem-ubiqua","text":"\u00c9 a linguagem do neg\u00f3cio, a usada no dia-a-dia. Dessa forma, todos devem utilizar a mesma linguagem, nada de termos t\u00e9cnicos e outros termos espec\u00edficos. Anota\u00e7\u00f5es/Dicion\u00e1rio: Explica\u00e7\u00f5es sobre quem s\u00e3o os atores e termos do dia-a-dia. Dependendo por subdom\u00ednio (contexto), a mesma pessoa pode ter nomes diferentes.","title":"Dicion\u00e1rio e L\u00ednguagem ub\u00edqua"},{"location":"ddd/discovery_and_knowledge/#modelagem-de-dominio","text":"Abstra\u00e7\u00e3o de um processo do qual resolve um problema. Extra\u00eddo apenas o essencial para que o problema seja resolvido, ou seja, remover do escopo detalhes que n\u00e3o agregam.","title":"Modelagem de Dom\u00ednio"},{"location":"ddd/discovery_and_knowledge/#onde-guardar","text":"Wikis Jira, Notion... Gest\u00e3o de Projetos Trello Reposit\u00f3rios Git (versionadores de c\u00f3digo ou softwares muito t\u00e9cnicos n\u00e3o s\u00e3o muito recomendados, pois estes documentos ser\u00e3o acessados/editados n\u00e3o necessariamente por pessoas t\u00e9cnicas)","title":"Onde guardar?"},{"location":"ddd/discovery_and_knowledge/#contextos-delimitados","text":"A linguagem Ub\u00edqua \u00e9 uma \u00f3tima metrica. Se \u00e9 a mesma terminologia em dois contextos e tratam de formas muito parecidas pode ser uma boa ideia juntar O numero de contextos pode mostrar o numero de times que far\u00e3o parte da equipe de desenvolvimento Um time pode trabalhar em N contextos delimitados, mas um contexto delimitado s\u00f3 pode ser trabalhado por um \u00fanico time","title":"Contextos Delimitados"},{"location":"ddd/domain_storytelling/","text":"Domain Storytelling Linguagem Pictogr\u00e1fica Atores: Pessoas, Grupo ou Sistema (Ator executa a\u00e7\u00e3o (verbo)) Objetos de Trabalho: Utilizados pelos atores, podem ser docs, objs, intera\u00e7\u00f5es f\u00edsicas ou digitais Atividades: A\u00e7\u00f5es dos atores com os objetos N\u00fameros Sequenciais: Fluxo da hist\u00f3ria Anota\u00e7\u00f5es: Infos importantes como limita\u00e7\u00f5es, a\u00e7\u00f5es tomadas, gatilhos e etc. Grupos: Representa\u00e7\u00f5es de partes de uma hist\u00f3ria Cores: Ajudam a trazer \u00eanfase a uma s\u00e9rie de atividades Ferramenta para suportar Domain Storytelling: https://egon.io/ Domain Storytelling ajuda a documentar a hist\u00f3ria que o usu\u00e1rio conta. Aqui estamos olhando para o escopo, onde come\u00e7a, o que est\u00e1 no meio e o que est\u00e1 no fim. Mas o quanto de detalhe queremos saber? at\u00e9 onde ir no n\u00edvel de detalhes? se tiver cen\u00e1rio alternativo, colocamos ele no mesmo documento? n\u00e3o! criamos um cen\u00e1rio novo! Onde podemos referenciar arquivos entre eles. Sugest\u00e3o de leitura: Alistair Cockburn Escrevendo Casos de Uso Efetivos Neste livro, Alistar cita 5 n\u00edveis de detalhamento: nuvem, pipa, mar, peixe e concha. Sendo do mais acima ao mais abaixo (vis\u00e3o mais ampla \u00e0 mais pr\u00f3xima). Por exemplo: nuvem: escola pipa: academico / adm (departamentos) mar: aulas, planos, matriculas peixe: conteudos, avalia\u00e7\u00e3o... concha: utiliza\u00e7\u00e3o de materiais para aula, emiss\u00e3o de relatorios, emiss\u00e3o de boletins, emiss\u00e3o de nota fiscal, se o relat\u00f3rio vai ser emitido em pdf, xls... Escpopo desejado Vs escopo atual O que o domain expert est\u00e1 descrevendo \u00e9 o que ele faz ou o que ele quer fazer? \u00e9 muito importante deixar isso muito claro desde o come\u00e7o! Existe uma tendencia de vir muitos pedidos de melhorias que ir\u00e3o surgir, n\u00e3o que seja ruim, mas precisamos deixar claro os limites. Dominio Puro: apenas a atividade, n\u00e3o estamos falando de tecnologia Dominio Digitalizado: Estamos falando do dom\u00ednio em tecnologia. Equipe de trabalho Domain Experts Equipe Dev Arquitetos (cuidar de q nao desvie do assunto) / moderar / garantir que est\u00e1 sendo documentado A equipe deve ser pequena e falar linguagem do cliente","title":"Domain Storytelling"},{"location":"ddd/domain_storytelling/#domain-storytelling","text":"","title":"Domain Storytelling"},{"location":"ddd/domain_storytelling/#linguagem-pictografica","text":"Atores: Pessoas, Grupo ou Sistema (Ator executa a\u00e7\u00e3o (verbo)) Objetos de Trabalho: Utilizados pelos atores, podem ser docs, objs, intera\u00e7\u00f5es f\u00edsicas ou digitais Atividades: A\u00e7\u00f5es dos atores com os objetos N\u00fameros Sequenciais: Fluxo da hist\u00f3ria Anota\u00e7\u00f5es: Infos importantes como limita\u00e7\u00f5es, a\u00e7\u00f5es tomadas, gatilhos e etc. Grupos: Representa\u00e7\u00f5es de partes de uma hist\u00f3ria Cores: Ajudam a trazer \u00eanfase a uma s\u00e9rie de atividades Ferramenta para suportar Domain Storytelling: https://egon.io/ Domain Storytelling ajuda a documentar a hist\u00f3ria que o usu\u00e1rio conta. Aqui estamos olhando para o escopo, onde come\u00e7a, o que est\u00e1 no meio e o que est\u00e1 no fim. Mas o quanto de detalhe queremos saber? at\u00e9 onde ir no n\u00edvel de detalhes? se tiver cen\u00e1rio alternativo, colocamos ele no mesmo documento? n\u00e3o! criamos um cen\u00e1rio novo! Onde podemos referenciar arquivos entre eles. Sugest\u00e3o de leitura: Alistair Cockburn Escrevendo Casos de Uso Efetivos Neste livro, Alistar cita 5 n\u00edveis de detalhamento: nuvem, pipa, mar, peixe e concha. Sendo do mais acima ao mais abaixo (vis\u00e3o mais ampla \u00e0 mais pr\u00f3xima). Por exemplo: nuvem: escola pipa: academico / adm (departamentos) mar: aulas, planos, matriculas peixe: conteudos, avalia\u00e7\u00e3o... concha: utiliza\u00e7\u00e3o de materiais para aula, emiss\u00e3o de relatorios, emiss\u00e3o de boletins, emiss\u00e3o de nota fiscal, se o relat\u00f3rio vai ser emitido em pdf, xls...","title":"Linguagem Pictogr\u00e1fica"},{"location":"ddd/domain_storytelling/#escpopo-desejado-vs-escopo-atual","text":"O que o domain expert est\u00e1 descrevendo \u00e9 o que ele faz ou o que ele quer fazer? \u00e9 muito importante deixar isso muito claro desde o come\u00e7o! Existe uma tendencia de vir muitos pedidos de melhorias que ir\u00e3o surgir, n\u00e3o que seja ruim, mas precisamos deixar claro os limites. Dominio Puro: apenas a atividade, n\u00e3o estamos falando de tecnologia Dominio Digitalizado: Estamos falando do dom\u00ednio em tecnologia.","title":"Escpopo desejado Vs escopo atual"},{"location":"ddd/domain_storytelling/#equipe-de-trabalho","text":"Domain Experts Equipe Dev Arquitetos (cuidar de q nao desvie do assunto) / moderar / garantir que est\u00e1 sendo documentado A equipe deve ser pequena e falar linguagem do cliente","title":"Equipe de trabalho"},{"location":"ddd/event_storming/","text":"Event Storming N\u00e3o pertence \u00e0 obra original; Foi criada posteriormente para auxiliar Atividade l\u00fadica com um grupo de pessoas bem diversas, como: Domain Experts Ouvintes Facilitador Quanto ao material: Post-It ou softwares como Miro ou FigJam Como Aplicar Separar os cards por cores e t\u00edtulo: - Eventos - Comandos - Pol\u00edticas - Modelos de Leitura - Sistemas Externos - Ponto De Aten\u00e7\u00e3o - Ator - Agregados - Eventos Pivotais Tudo come\u00e7a com um brainstorming... Eventos Representam os acontecimentos do contexto e s\u00e3o sempre escritos com o verbo no passado. Liga\u00e7\u00f5es: Entre eventos Comandos Representam os gatilhos de a\u00e7\u00f5es e s\u00e3o escritos com o verbo no presente. Liga\u00e7\u00f5es: Antecede um evento Pol\u00edticas Comandos que s\u00e3o executados por automa\u00e7\u00f5es do sistema. As pol\u00edticas podem ter uma condi\u00e7\u00e3o para serem disparadas. Liga\u00e7\u00f5es: Antes, entre ou ap\u00f3s um evento Exemplo: Professor -> CMD Cria Atividade -> EV Atividade Criada -> Pol Notificar o Aluno de nova Atividade -> CMD Envia Notifica\u00e7\u00e3o -> Notifica\u00e7\u00e3o Enviada ao Aluno -> PA como o aluno \u00e9 notificado? Modelos de Leitura Representa a interface que o usu\u00e1rio ir\u00e1 realizar/ver o comando e/ou tomar uma decis\u00e3o. Liga\u00e7\u00f5es: Antes de comandos Pontos de Aten\u00e7\u00e3o Representam as d\u00favidas que ainda temos sobre como um evento ocorre Liga\u00e7\u00f5es: Em eventos Ator Pessoa quem realiza um comando Liga\u00e7\u00f5es: Comandos Agregados Representam as entidades agregadoras que ir\u00e3o agrupar os eventos e outras entidades Liga\u00e7\u00f5es: Eventos, Comandos e etc Eventos Pivotais Indicam uma mudan\u00e7a de fase ou de contexto na linha do tempo. S\u00e3o importantes para indicar as limita\u00e7\u00f5es dentro de um contexto e ajudam a identificar os agregados Liga\u00e7\u00f5es: Linha do tempo Exemplo: Evento Pivotal Descri\u00e7\u00e3o A Eventos relacionados \u00e0 entrega da atividade pelo aluno B Eventos Relacionados a corre\u00e7\u00e3o da atividade pelo professor C Eventos Relacionados aplicar a nota Sistemas Externos Representa um sistema que est\u00e1 fora do dom\u00ednio (em outro contexto delimitado) Liga\u00e7\u00f5es: Eventos e comandos Como Facilitar o Event Storming Todos criam os cart\u00f5es com os eventos (brainstorming) Os cart\u00f5es de eventos s\u00e3o refinados, removendo os duplicados Os cart\u00f5es de eventos s\u00e3o colocados em ordem sequencial e ligados por flechas, apontando a dire\u00e7\u00e3o do fluxo [3.1.] Qualquer caminho alternativo \u00e9 indicado por uma bifurca\u00e7\u00e3o. Dica: Alterar a cor/tra\u00e7ado das flechas nos caminhos alternativos para facilitar a leitura Em uma nova leitura dos eventos, adicionar os cart\u00f5es de pontos de aten\u00e7\u00e3o, destacando as d\u00favidas que ainda temos Separar os contextos com os Eventos Pivotais Escrever os comandos que fazem com que os eventos aconte\u00e7am, adicionando-os anteriormente a cada evento Adicione os cart\u00f5es de Pol\u00edtica: eventos que s\u00e3o executados por outros sistemas e n\u00e3o um ator Inclua os cart\u00f5es de modelo de leitura Inclua os cart\u00f5es de sistema externo Monte os cart\u00f5es de agregados, adicionando todos os eventos e comandos aos agregados","title":"Event Storming"},{"location":"ddd/event_storming/#event-storming","text":"N\u00e3o pertence \u00e0 obra original; Foi criada posteriormente para auxiliar Atividade l\u00fadica com um grupo de pessoas bem diversas, como: Domain Experts Ouvintes Facilitador Quanto ao material: Post-It ou softwares como Miro ou FigJam","title":"Event Storming"},{"location":"ddd/event_storming/#como-aplicar","text":"Separar os cards por cores e t\u00edtulo: - Eventos - Comandos - Pol\u00edticas - Modelos de Leitura - Sistemas Externos - Ponto De Aten\u00e7\u00e3o - Ator - Agregados - Eventos Pivotais Tudo come\u00e7a com um brainstorming...","title":"Como Aplicar"},{"location":"ddd/event_storming/#eventos","text":"Representam os acontecimentos do contexto e s\u00e3o sempre escritos com o verbo no passado. Liga\u00e7\u00f5es: Entre eventos","title":"Eventos"},{"location":"ddd/event_storming/#comandos","text":"Representam os gatilhos de a\u00e7\u00f5es e s\u00e3o escritos com o verbo no presente. Liga\u00e7\u00f5es: Antecede um evento","title":"Comandos"},{"location":"ddd/event_storming/#politicas","text":"Comandos que s\u00e3o executados por automa\u00e7\u00f5es do sistema. As pol\u00edticas podem ter uma condi\u00e7\u00e3o para serem disparadas. Liga\u00e7\u00f5es: Antes, entre ou ap\u00f3s um evento Exemplo: Professor -> CMD Cria Atividade -> EV Atividade Criada -> Pol Notificar o Aluno de nova Atividade -> CMD Envia Notifica\u00e7\u00e3o -> Notifica\u00e7\u00e3o Enviada ao Aluno -> PA como o aluno \u00e9 notificado?","title":"Pol\u00edticas"},{"location":"ddd/event_storming/#modelos-de-leitura","text":"Representa a interface que o usu\u00e1rio ir\u00e1 realizar/ver o comando e/ou tomar uma decis\u00e3o. Liga\u00e7\u00f5es: Antes de comandos","title":"Modelos de Leitura"},{"location":"ddd/event_storming/#pontos-de-atencao","text":"Representam as d\u00favidas que ainda temos sobre como um evento ocorre Liga\u00e7\u00f5es: Em eventos","title":"Pontos de Aten\u00e7\u00e3o"},{"location":"ddd/event_storming/#ator","text":"Pessoa quem realiza um comando Liga\u00e7\u00f5es: Comandos","title":"Ator"},{"location":"ddd/event_storming/#agregados","text":"Representam as entidades agregadoras que ir\u00e3o agrupar os eventos e outras entidades Liga\u00e7\u00f5es: Eventos, Comandos e etc","title":"Agregados"},{"location":"ddd/event_storming/#eventos-pivotais","text":"Indicam uma mudan\u00e7a de fase ou de contexto na linha do tempo. S\u00e3o importantes para indicar as limita\u00e7\u00f5es dentro de um contexto e ajudam a identificar os agregados Liga\u00e7\u00f5es: Linha do tempo Exemplo: Evento Pivotal Descri\u00e7\u00e3o A Eventos relacionados \u00e0 entrega da atividade pelo aluno B Eventos Relacionados a corre\u00e7\u00e3o da atividade pelo professor C Eventos Relacionados aplicar a nota","title":"Eventos Pivotais"},{"location":"ddd/event_storming/#sistemas-externos","text":"Representa um sistema que est\u00e1 fora do dom\u00ednio (em outro contexto delimitado) Liga\u00e7\u00f5es: Eventos e comandos","title":"Sistemas Externos"},{"location":"ddd/event_storming/#como-facilitar-o-event-storming","text":"Todos criam os cart\u00f5es com os eventos (brainstorming) Os cart\u00f5es de eventos s\u00e3o refinados, removendo os duplicados Os cart\u00f5es de eventos s\u00e3o colocados em ordem sequencial e ligados por flechas, apontando a dire\u00e7\u00e3o do fluxo [3.1.] Qualquer caminho alternativo \u00e9 indicado por uma bifurca\u00e7\u00e3o. Dica: Alterar a cor/tra\u00e7ado das flechas nos caminhos alternativos para facilitar a leitura Em uma nova leitura dos eventos, adicionar os cart\u00f5es de pontos de aten\u00e7\u00e3o, destacando as d\u00favidas que ainda temos Separar os contextos com os Eventos Pivotais Escrever os comandos que fazem com que os eventos aconte\u00e7am, adicionando-os anteriormente a cada evento Adicione os cart\u00f5es de Pol\u00edtica: eventos que s\u00e3o executados por outros sistemas e n\u00e3o um ator Inclua os cart\u00f5es de modelo de leitura Inclua os cart\u00f5es de sistema externo Monte os cart\u00f5es de agregados, adicionando todos os eventos e comandos aos agregados","title":"Como Facilitar o Event Storming"},{"location":"ddd/introducao/","text":"Aula de introdu\u00e7\u00e3o _O que \u00e9 DDD _Desafios dos projetos _Design Estrat\u00e9gico Porque e O que O que \u00e9 o dom\u00ednio? Podemos separar em 3 tipos de dom\u00ednios: Subdom\u00ednio principal: Subdom\u00ednio Gen\u00e9rico Subdom\u00ednio de suporte _Um mapa que pode ajudar a identificar os subdom\u00ednios _E quem nos ensina sobre os subdom\u00ednios? Aula de introdu\u00e7\u00e3o _O que \u00e9 DDD Domain Driven Design Mecanismo para ajudar a resolver problemas de forma estruturada e de forma que ajude a escalar ajuda a pensar e esbo\u00e7ar a solu\u00e7\u00e3o antes de sair escrevendo c\u00f3digo, evitando escrever c\u00f3digo que cause d\u00e9bitos t\u00e9cnicos _Desafios dos projetos Falta de clareza nos objetivos; Precisamos conversar com os stakeholders e entender o problema que iremos resolver. Dependendo do ator que conversamos iremos obter respostas diferentes Scoope Creep; Aquele que n\u00e3o para de mudar o escopo Expectativa irreal \"isso \u00e9 f\u00e1cil, vc faz em 5minutos\" Recursos Limitados Falha na Comunica\u00e7\u00e3o DDD \u00e9 muito sobre comunica\u00e7\u00e3o Atraso nas Entregas Falta de Transpar\u00eancia _Design Estrat\u00e9gico Porque e O que Gest\u00e3o Pedag\u00f3gica Gest\u00e3o Financeira Gest\u00e3o Comunica\u00e7\u00e3o Gest\u00e3o Administrativa Gest\u00e3o Recursos Humanos O que \u00e9 o dom\u00ednio? \u00e9 o cora\u00e7\u00e3o do software! Vamos desenvolver solu\u00e7\u00f5es para o neg\u00f3cio. Mesmo ela sendo permeada por outras coisas. Dom\u00ednio \u00e9 o neg\u00f3cio em si, aquilo que a empresa faz, \u00e9 o motivo dela existir (\u00e9 o todo). Podemos separar em 3 tipos de dom\u00ednios: Subdom\u00ednios principais; Subdom\u00ednios gen\u00e9ricos; Subdom\u00ednios de suporte; Subdom\u00ednio principal: \u00c9 o neg\u00f3cio que o diferencia dos outros no mercado e possui l\u00f3gica complexa. Podemos ter N subdom\u00ednios principais. O dom\u00ednio vive dentro de um contexto, poi exemplo: Para uma escola, o campo de contabilidade n\u00e3o \u00e9 um subdom\u00ednio. Mas se voc\u00ea terceirizar para uma empresa de contabilidade esta tarefa, para esta outra empresa esta tarefa ser\u00e1 um subdom\u00ednio. Subdom\u00ednio Gen\u00e9rico \u00c9 o que todo mundo faz, atividades que s\u00e3o comuns no mercado mas que precisam existir para que o neg\u00f3cio funcione. Por exemplo, o portal da empresa, a loja online, as fun\u00e7\u00f5es de autentica\u00e7\u00e3o e afins. A l\u00f3gica contida neste tipo de subdom\u00ednio \u00e9 complexa. Subdom\u00ednio de suporte Apoia o neg\u00f3cio da empresa, esse n\u00e3o da nenhuma vantagem estrat\u00e9gica para o neg\u00f3cio e \"apenas\" complementa o que o subdom\u00ednio principal faz. Por exemplo, a gest\u00e3o de dados dos pais dos alunos, integra\u00e7\u00f5es com o org\u00e3o regulador e etc. \u00c9 importante lembrar que cada subdom\u00ednio \u00e9 um neg\u00f3cio e temos que saber o que priorizar. O Subdom\u00ednio principal \u00e9 o dominio que alavanca, os outros s\u00e3o importantes tamb\u00e9m, mas a princ\u00edpio precisamos priorizar o principal. _Um mapa que pode ajudar a identificar os subdom\u00ednios Apesar de n\u00e3o existir uma regra geral, podemos seguir um fluxo generalista para nos auxiliar a separar os subdom\u00ednios. flowchart TB A{A solu\u00e7\u00e3o pode ser comprada?}-->|Sim| B{Pode arriscar o neg\u00f3cio?}-->|Sim| D[Subdom\u00ednio Principal] A-->|N\u00e3o| C{A l\u00f3gica de neg\u00f3cio \u00e9 complexa?}-->|Sim| D[Subdom\u00ednio Principal] B-->|N\u00e3o| E[Subdom\u00ednio Gen\u00e9rico] C-->|N\u00e3o| F[Subdom\u00ednio de Suporte] _E quem nos ensina sobre os subdom\u00ednios? Falar com algu\u00e9m que tenha XP, que domine o processo, que conhe\u00e7a o neg\u00f3cio. Esta pessoa \u00e9 a Domain Expert . Esta pessoa \u00e9 quem conta a hist\u00f3ria, quem escreve os processos e procedimentos. Enfim, n\u00e3o h\u00e1 uma receita de bolo, uma resposta fechada, temos que considerar muito o trade off, os riscos, o quanto vale a pena no contexto do neg\u00f3cio.","title":"Introducao"},{"location":"ddd/introducao/#aula-de-introducao","text":"","title":"Aula de introdu\u00e7\u00e3o"},{"location":"ddd/introducao/#_o-que-e-ddd","text":"Domain Driven Design Mecanismo para ajudar a resolver problemas de forma estruturada e de forma que ajude a escalar ajuda a pensar e esbo\u00e7ar a solu\u00e7\u00e3o antes de sair escrevendo c\u00f3digo, evitando escrever c\u00f3digo que cause d\u00e9bitos t\u00e9cnicos","title":"_O que \u00e9 DDD"},{"location":"ddd/introducao/#_desafios-dos-projetos","text":"Falta de clareza nos objetivos; Precisamos conversar com os stakeholders e entender o problema que iremos resolver. Dependendo do ator que conversamos iremos obter respostas diferentes Scoope Creep; Aquele que n\u00e3o para de mudar o escopo Expectativa irreal \"isso \u00e9 f\u00e1cil, vc faz em 5minutos\" Recursos Limitados Falha na Comunica\u00e7\u00e3o DDD \u00e9 muito sobre comunica\u00e7\u00e3o Atraso nas Entregas Falta de Transpar\u00eancia","title":"_Desafios dos projetos"},{"location":"ddd/introducao/#_design-estrategico","text":"","title":"_Design Estrat\u00e9gico"},{"location":"ddd/introducao/#porque-e-o-que","text":"Gest\u00e3o Pedag\u00f3gica Gest\u00e3o Financeira Gest\u00e3o Comunica\u00e7\u00e3o Gest\u00e3o Administrativa Gest\u00e3o Recursos Humanos","title":"Porque e O que"},{"location":"ddd/introducao/#o-que-e-o-dominio","text":"\u00e9 o cora\u00e7\u00e3o do software! Vamos desenvolver solu\u00e7\u00f5es para o neg\u00f3cio. Mesmo ela sendo permeada por outras coisas. Dom\u00ednio \u00e9 o neg\u00f3cio em si, aquilo que a empresa faz, \u00e9 o motivo dela existir (\u00e9 o todo).","title":"O que \u00e9 o dom\u00ednio?"},{"location":"ddd/introducao/#podemos-separar-em-3-tipos-de-dominios","text":"Subdom\u00ednios principais; Subdom\u00ednios gen\u00e9ricos; Subdom\u00ednios de suporte;","title":"Podemos separar em 3 tipos de dom\u00ednios:"},{"location":"ddd/introducao/#subdominio-principal","text":"\u00c9 o neg\u00f3cio que o diferencia dos outros no mercado e possui l\u00f3gica complexa. Podemos ter N subdom\u00ednios principais. O dom\u00ednio vive dentro de um contexto, poi exemplo: Para uma escola, o campo de contabilidade n\u00e3o \u00e9 um subdom\u00ednio. Mas se voc\u00ea terceirizar para uma empresa de contabilidade esta tarefa, para esta outra empresa esta tarefa ser\u00e1 um subdom\u00ednio.","title":"Subdom\u00ednio principal:"},{"location":"ddd/introducao/#subdominio-generico","text":"\u00c9 o que todo mundo faz, atividades que s\u00e3o comuns no mercado mas que precisam existir para que o neg\u00f3cio funcione. Por exemplo, o portal da empresa, a loja online, as fun\u00e7\u00f5es de autentica\u00e7\u00e3o e afins. A l\u00f3gica contida neste tipo de subdom\u00ednio \u00e9 complexa.","title":"Subdom\u00ednio Gen\u00e9rico"},{"location":"ddd/introducao/#subdominio-de-suporte","text":"Apoia o neg\u00f3cio da empresa, esse n\u00e3o da nenhuma vantagem estrat\u00e9gica para o neg\u00f3cio e \"apenas\" complementa o que o subdom\u00ednio principal faz. Por exemplo, a gest\u00e3o de dados dos pais dos alunos, integra\u00e7\u00f5es com o org\u00e3o regulador e etc. \u00c9 importante lembrar que cada subdom\u00ednio \u00e9 um neg\u00f3cio e temos que saber o que priorizar. O Subdom\u00ednio principal \u00e9 o dominio que alavanca, os outros s\u00e3o importantes tamb\u00e9m, mas a princ\u00edpio precisamos priorizar o principal.","title":"Subdom\u00ednio de suporte"},{"location":"ddd/introducao/#_um-mapa-que-pode-ajudar-a-identificar-os-subdominios","text":"Apesar de n\u00e3o existir uma regra geral, podemos seguir um fluxo generalista para nos auxiliar a separar os subdom\u00ednios. flowchart TB A{A solu\u00e7\u00e3o pode ser comprada?}-->|Sim| B{Pode arriscar o neg\u00f3cio?}-->|Sim| D[Subdom\u00ednio Principal] A-->|N\u00e3o| C{A l\u00f3gica de neg\u00f3cio \u00e9 complexa?}-->|Sim| D[Subdom\u00ednio Principal] B-->|N\u00e3o| E[Subdom\u00ednio Gen\u00e9rico] C-->|N\u00e3o| F[Subdom\u00ednio de Suporte]","title":"_Um mapa que pode ajudar a identificar os subdom\u00ednios"},{"location":"ddd/introducao/#_e-quem-nos-ensina-sobre-os-subdominios","text":"Falar com algu\u00e9m que tenha XP, que domine o processo, que conhe\u00e7a o neg\u00f3cio. Esta pessoa \u00e9 a Domain Expert . Esta pessoa \u00e9 quem conta a hist\u00f3ria, quem escreve os processos e procedimentos. Enfim, n\u00e3o h\u00e1 uma receita de bolo, uma resposta fechada, temos que considerar muito o trade off, os riscos, o quanto vale a pena no contexto do neg\u00f3cio.","title":"_E quem nos ensina sobre os subdom\u00ednios?"},{"location":"ddd/system_requirements/","text":"Levantamento de Requisitos Os Quatro Grandes Riscos Frentes que precisamos analisar antes de lan\u00e7ar um produto. Os quatro listados s\u00e3o: - Risco de Valor - Risco de Neg\u00f3cio - Risco de Usabilidade - Risco T\u00e9cnico Risco de Valor Risco do usu\u00e1rio n\u00e3o precisar de fato do seu produto. Se questione: - O produto gera valor o suficiente a ponto do usu\u00e1rio pagar por ele? - Quais outras formas que o usu\u00e1rio tem para resolver o mesmo problema? Risco de Neg\u00f3cio Est\u00e1 ligado ao ponto de que se o produto faz sentido no planjeamento estrat\u00e9gico da empresa. Se o produto pode gerar algum desgaste na empresa na esfera reputacional, legal ou financeiro. Risco de Usabilidade Est\u00e1 ligado com a dificuldade do usu\u00e1rio em utilizar o sistema (al\u00f4 analistas de UX). Risco T\u00e9cnico Est\u00e1 ligado ao risco de n\u00e3o ter recursos de profissionais ou tecnologias para implementar o produto Como Mitigar os Riscos Antes de come\u00e7ar a implementar o produto, passamos pela etapa de descobrimento, que far\u00e1 o estudo de mercado da solu\u00e7\u00e3o. Podemos ent\u00e3o criar uma esteira de desenvolvimento inicialmente dividida por duas \u00e1reas: Upstream e Downstream - Planjamento e Desenvolvimento de demandas, respectivamente. Sugest\u00e3o de colunas: Planejamento: - backlog - levantamento de requisitos - refinamento t\u00e9cnico - quebras t\u00e9cnicas e estimativas - pronto para desenvolvimento - prioridades (esta coluna \u00e9 divida entre as duas \u00e1reas, pois \u00e9 a passagem de \u00e1rea) Desenvolvimento: - em andamento - code review - testing - fixing uat - Pronto para deploy - done O objetivo do levantamento de requisitos \u00e9 mitigar problemas como: Demanda incompreendida pelo profissional que a desenvolver\u00e1 Imprevisibilidade no desenvolvimento Mitigar bugs, d\u00e9bitos t\u00e9cnicos e alto grau de depend\u00eancia de outros sistemas Especifica\u00e7\u00e3o do Board Coluna \u00c1rea Descri\u00e7\u00e3o backlog Planejamento Onde ficam todas as id\u00e9ias que ainda n\u00e3o est\u00e3o maduras levantamento de requisitos Planejamento Explorar e detalhar o que deve ser entregue. Personas e etc refinamento t\u00e9cnico Planejamento Explorar solu\u00e7\u00f5es tecnol\u00f3gicas para cumprir o objetivo quebras t\u00e9cnicas e estimativas Planejamento Separar as demandas para que elas sejam simples de executar e sem depender umas das outras pronto para desenvolvimento Planejamento Onde estamos preparados para desenvolver prioridades Planejamento em andamento Desenvolvimento code review Desenvolvimento testing Desenvolvimento fixing uat Desenvolvimento Pronto para deploy Desenvolvimento done Desenvolvimento Documenta\u00e7\u00e3o dos Requisitos Persona Qualquer usu\u00e1rio de um produto. \u00c9 importante entender o perfil da persona para poder projetar de forma correta o comportamento do produto. Problema A dor do usu\u00e1rio que ser\u00e1 resolvida. Deve ser bem claro quanto ao fluxo atual do usu\u00e1rio e como ele resolve ele atualmente. Mapeamento do fluxo \u00c9 importante mapear o fluxo atual, apontando por etapas as personas que a executam e qual o sistema. Desta forma, podemos propor solu\u00e7\u00f5es \u00e0s etapas mais exaustivas. Objetivo Descrever os objetivos que possam ser medidos Requisitos da solu\u00e7\u00e3o Aqui mapeamos os requisitos funcionais. Requisitos n\u00e3o funcionais Aqui mapeamos os requisitos que n\u00e3o s\u00e3o funcionalidades mas que s\u00e3o essenciais para o sucesso do produto. Ex: Seguran\u00e7a. Upstream \u00c9 o conceito da etapa de mapeamento e descoberta do produto. Downstream Consiste do desenvolvimento (implementa\u00e7\u00e3o) pr\u00f3priamente dita at\u00e9 a entrega (done)","title":"Levantamento de Requisitos"},{"location":"ddd/system_requirements/#levantamento-de-requisitos","text":"","title":"Levantamento de Requisitos"},{"location":"ddd/system_requirements/#os-quatro-grandes-riscos","text":"Frentes que precisamos analisar antes de lan\u00e7ar um produto. Os quatro listados s\u00e3o: - Risco de Valor - Risco de Neg\u00f3cio - Risco de Usabilidade - Risco T\u00e9cnico","title":"Os Quatro Grandes Riscos"},{"location":"ddd/system_requirements/#risco-de-valor","text":"Risco do usu\u00e1rio n\u00e3o precisar de fato do seu produto. Se questione: - O produto gera valor o suficiente a ponto do usu\u00e1rio pagar por ele? - Quais outras formas que o usu\u00e1rio tem para resolver o mesmo problema?","title":"Risco de Valor"},{"location":"ddd/system_requirements/#risco-de-negocio","text":"Est\u00e1 ligado ao ponto de que se o produto faz sentido no planjeamento estrat\u00e9gico da empresa. Se o produto pode gerar algum desgaste na empresa na esfera reputacional, legal ou financeiro.","title":"Risco de Neg\u00f3cio"},{"location":"ddd/system_requirements/#risco-de-usabilidade","text":"Est\u00e1 ligado com a dificuldade do usu\u00e1rio em utilizar o sistema (al\u00f4 analistas de UX).","title":"Risco de Usabilidade"},{"location":"ddd/system_requirements/#risco-tecnico","text":"Est\u00e1 ligado ao risco de n\u00e3o ter recursos de profissionais ou tecnologias para implementar o produto","title":"Risco T\u00e9cnico"},{"location":"ddd/system_requirements/#como-mitigar-os-riscos","text":"Antes de come\u00e7ar a implementar o produto, passamos pela etapa de descobrimento, que far\u00e1 o estudo de mercado da solu\u00e7\u00e3o. Podemos ent\u00e3o criar uma esteira de desenvolvimento inicialmente dividida por duas \u00e1reas: Upstream e Downstream - Planjamento e Desenvolvimento de demandas, respectivamente. Sugest\u00e3o de colunas: Planejamento: - backlog - levantamento de requisitos - refinamento t\u00e9cnico - quebras t\u00e9cnicas e estimativas - pronto para desenvolvimento - prioridades (esta coluna \u00e9 divida entre as duas \u00e1reas, pois \u00e9 a passagem de \u00e1rea) Desenvolvimento: - em andamento - code review - testing - fixing uat - Pronto para deploy - done O objetivo do levantamento de requisitos \u00e9 mitigar problemas como: Demanda incompreendida pelo profissional que a desenvolver\u00e1 Imprevisibilidade no desenvolvimento Mitigar bugs, d\u00e9bitos t\u00e9cnicos e alto grau de depend\u00eancia de outros sistemas","title":"Como Mitigar os Riscos"},{"location":"ddd/system_requirements/#especificacao-do-board","text":"Coluna \u00c1rea Descri\u00e7\u00e3o backlog Planejamento Onde ficam todas as id\u00e9ias que ainda n\u00e3o est\u00e3o maduras levantamento de requisitos Planejamento Explorar e detalhar o que deve ser entregue. Personas e etc refinamento t\u00e9cnico Planejamento Explorar solu\u00e7\u00f5es tecnol\u00f3gicas para cumprir o objetivo quebras t\u00e9cnicas e estimativas Planejamento Separar as demandas para que elas sejam simples de executar e sem depender umas das outras pronto para desenvolvimento Planejamento Onde estamos preparados para desenvolver prioridades Planejamento em andamento Desenvolvimento code review Desenvolvimento testing Desenvolvimento fixing uat Desenvolvimento Pronto para deploy Desenvolvimento done Desenvolvimento","title":"Especifica\u00e7\u00e3o do Board"},{"location":"ddd/system_requirements/#documentacao-dos-requisitos","text":"","title":"Documenta\u00e7\u00e3o dos Requisitos"},{"location":"ddd/system_requirements/#persona","text":"Qualquer usu\u00e1rio de um produto. \u00c9 importante entender o perfil da persona para poder projetar de forma correta o comportamento do produto.","title":"Persona"},{"location":"ddd/system_requirements/#problema","text":"A dor do usu\u00e1rio que ser\u00e1 resolvida. Deve ser bem claro quanto ao fluxo atual do usu\u00e1rio e como ele resolve ele atualmente.","title":"Problema"},{"location":"ddd/system_requirements/#mapeamento-do-fluxo","text":"\u00c9 importante mapear o fluxo atual, apontando por etapas as personas que a executam e qual o sistema. Desta forma, podemos propor solu\u00e7\u00f5es \u00e0s etapas mais exaustivas.","title":"Mapeamento do fluxo"},{"location":"ddd/system_requirements/#objetivo","text":"Descrever os objetivos que possam ser medidos","title":"Objetivo"},{"location":"ddd/system_requirements/#requisitos-da-solucao","text":"Aqui mapeamos os requisitos funcionais.","title":"Requisitos da solu\u00e7\u00e3o"},{"location":"ddd/system_requirements/#requisitos-nao-funcionais","text":"Aqui mapeamos os requisitos que n\u00e3o s\u00e3o funcionalidades mas que s\u00e3o essenciais para o sucesso do produto. Ex: Seguran\u00e7a.","title":"Requisitos n\u00e3o funcionais"},{"location":"ddd/system_requirements/#upstream","text":"\u00c9 o conceito da etapa de mapeamento e descoberta do produto.","title":"Upstream"},{"location":"ddd/system_requirements/#downstream","text":"Consiste do desenvolvimento (implementa\u00e7\u00e3o) pr\u00f3priamente dita at\u00e9 a entrega (done)","title":"Downstream"},{"location":"ddd/tactical_design/","text":"Design T\u00e1tico Como o DDD se adapta em camadas No geral s\u00e3o 3 camadas: Interface do usu\u00e1rio, aplica\u00e7\u00e3o e Dom\u00ednio Na literatura mais recente, Vernon por exemplo, adiciona uma quarta camada: infraestrutura Camada de Interface do Usu\u00e1rio GUI, CLI, Apis e etc Tudo o que faz interface com algum usu\u00e1rio Camada de Aplica\u00e7\u00e3o Interface de media\u00e7\u00e3o entre Interface de usu\u00e1rio e Dom\u00ednio N\u00e3o tem regra de neg\u00f3cio e n\u00e3o altera nenhum estado Monitora e reporta as mudan\u00e7as para a camada superior Controle de eventos Reportes e etc Camada de Dom\u00ednio O Cora\u00e7\u00e3o do Software Onde tem as regras e persist\u00eancias de neg\u00f3cios N\u00e3o tem a comunica\u00e7\u00e3o com banco de dados para guardar/alterar dados Camada de Infraestrutura Base para todas as outras camadas Acesso a base de dados Facilita a comunica\u00e7\u00e3o entre as camadas superiores Como estruturar os componentes Objetos de Valor Reconhecidos por n\u00e3o possu\u00edrem identificadores S\u00e3o imut\u00e1veis Se tiver que mudar, estamos gerando um novo valor Mensuram, quantificam ou descrevem algo no dom\u00ednio Entidades Um objeto que \u00e9 identificado por um ID Agregados Um conjunto de entidades que compartilham a linguagem ub\u00edqua Ex: Atividade -> Coment\u00e1rio & Anexos & Notas Somente o agregado pode mudar o estado de seu contexto. No exemplo anterior, apenas a entidade Atividade poderia alterar uma nota, coment\u00e1rio ou anexos O Agregado tem comandos. Uma entidade externa pode passar um comando para o agregado, mas quem o executa \u00e9 o pr\u00f3prio agregado. Agregados interagem entre eles por meio do identificador. Para um agregado referenciar ao outro, adicionamos uma refer\u00eancia nele ao Id do outro. Semelhante \u00e0 uma FK de um banco relacional Servi\u00e7os de Dom\u00ednio S\u00e3o objetos tratados em separador que trabalham com diversas entidades e agregados sempre que s\u00e3o necess\u00e1rios c\u00e1lculos, execu\u00e7\u00f5es de rotinas e etc. Afetam uma entidade mas n\u00e3o s\u00e3o uma regra dela Captura eventos de dom\u00ednio","title":"Design T\u00e1tico"},{"location":"ddd/tactical_design/#design-tatico","text":"","title":"Design T\u00e1tico"},{"location":"ddd/tactical_design/#como-o-ddd-se-adapta-em-camadas","text":"No geral s\u00e3o 3 camadas: Interface do usu\u00e1rio, aplica\u00e7\u00e3o e Dom\u00ednio Na literatura mais recente, Vernon por exemplo, adiciona uma quarta camada: infraestrutura","title":"Como o DDD se adapta em camadas"},{"location":"ddd/tactical_design/#camada-de-interface-do-usuario","text":"GUI, CLI, Apis e etc Tudo o que faz interface com algum usu\u00e1rio","title":"Camada de Interface do Usu\u00e1rio"},{"location":"ddd/tactical_design/#camada-de-aplicacao","text":"Interface de media\u00e7\u00e3o entre Interface de usu\u00e1rio e Dom\u00ednio N\u00e3o tem regra de neg\u00f3cio e n\u00e3o altera nenhum estado Monitora e reporta as mudan\u00e7as para a camada superior Controle de eventos Reportes e etc","title":"Camada de Aplica\u00e7\u00e3o"},{"location":"ddd/tactical_design/#camada-de-dominio","text":"O Cora\u00e7\u00e3o do Software Onde tem as regras e persist\u00eancias de neg\u00f3cios N\u00e3o tem a comunica\u00e7\u00e3o com banco de dados para guardar/alterar dados","title":"Camada de Dom\u00ednio"},{"location":"ddd/tactical_design/#camada-de-infraestrutura","text":"Base para todas as outras camadas Acesso a base de dados Facilita a comunica\u00e7\u00e3o entre as camadas superiores","title":"Camada de Infraestrutura"},{"location":"ddd/tactical_design/#como-estruturar-os-componentes","text":"","title":"Como estruturar os componentes"},{"location":"ddd/tactical_design/#objetos-de-valor","text":"Reconhecidos por n\u00e3o possu\u00edrem identificadores S\u00e3o imut\u00e1veis Se tiver que mudar, estamos gerando um novo valor Mensuram, quantificam ou descrevem algo no dom\u00ednio","title":"Objetos de Valor"},{"location":"ddd/tactical_design/#entidades","text":"Um objeto que \u00e9 identificado por um ID","title":"Entidades"},{"location":"ddd/tactical_design/#agregados","text":"Um conjunto de entidades que compartilham a linguagem ub\u00edqua Ex: Atividade -> Coment\u00e1rio & Anexos & Notas Somente o agregado pode mudar o estado de seu contexto. No exemplo anterior, apenas a entidade Atividade poderia alterar uma nota, coment\u00e1rio ou anexos O Agregado tem comandos. Uma entidade externa pode passar um comando para o agregado, mas quem o executa \u00e9 o pr\u00f3prio agregado. Agregados interagem entre eles por meio do identificador. Para um agregado referenciar ao outro, adicionamos uma refer\u00eancia nele ao Id do outro. Semelhante \u00e0 uma FK de um banco relacional","title":"Agregados"},{"location":"ddd/tactical_design/#servicos-de-dominio","text":"S\u00e3o objetos tratados em separador que trabalham com diversas entidades e agregados sempre que s\u00e3o necess\u00e1rios c\u00e1lculos, execu\u00e7\u00f5es de rotinas e etc. Afetam uma entidade mas n\u00e3o s\u00e3o uma regra dela Captura eventos de dom\u00ednio","title":"Servi\u00e7os de Dom\u00ednio"},{"location":"ddd/technical_refinement/","text":"Refinamento T\u00e9cnico O objetivo \u00e9 alinhar todos os pontos para que possamos saber tudo o que deve ser feito, independente do prazo de entrega, assim podemos ter alguma previsibildiade de todas as tarefas e o que ser\u00e1 necess\u00e1rio construir. \u00c9 natural aparecerem d\u00favidas que ainda n\u00e3o est\u00e3o no requisito. O refinamento inclui a visita e discuss\u00e3o em todas as etapas j\u00e1 mapeadas, com a explica\u00e7\u00e3o do que deve ser feito e do porqu\u00ea, devemos anotar as d\u00favidas t\u00e9cnicas como: - De onde vem as fontes de dados? - Podemos fazer alguma melhoria no que foi mapeado? - Podemos fazer alguma altera\u00e7\u00e3o que facilite a implementa\u00e7\u00e3o - Precisamos de algum outro sistema de controle / Dashboards e m\u00e9tricas do produto? - Encontramos algum fluxo alternativo que n\u00e3o foi mapeado? Pontos Negativos de Pular o Refinamento N\u00e3o h\u00e1 vis\u00e3o do qu\u00e3o complexo \u00e9 a solu\u00e7\u00e3o, o que leva a quebra de expectativa quanto \u00e0 entrega Aumento de bugs e d\u00e9bitos t\u00e9cnicos Spikes e PoCs (Proof of Concept) Muitas vezes as demandas podem parecer complicadas demais ou ainda n\u00e3o temos uma ideia de como implement\u00e1-las, para isto criamos Spikes (itens de desenvolvimento) para explorar novas solu\u00e7\u00f5es e PoCs (proof of concept) que \u00e9 a implementa\u00e7\u00e3o simpl\u00f3ria de uma id\u00e9ia para comprovar o funcionamento e ader\u00eancia","title":"Refinamento T\u00e9cnico"},{"location":"ddd/technical_refinement/#refinamento-tecnico","text":"O objetivo \u00e9 alinhar todos os pontos para que possamos saber tudo o que deve ser feito, independente do prazo de entrega, assim podemos ter alguma previsibildiade de todas as tarefas e o que ser\u00e1 necess\u00e1rio construir. \u00c9 natural aparecerem d\u00favidas que ainda n\u00e3o est\u00e3o no requisito. O refinamento inclui a visita e discuss\u00e3o em todas as etapas j\u00e1 mapeadas, com a explica\u00e7\u00e3o do que deve ser feito e do porqu\u00ea, devemos anotar as d\u00favidas t\u00e9cnicas como: - De onde vem as fontes de dados? - Podemos fazer alguma melhoria no que foi mapeado? - Podemos fazer alguma altera\u00e7\u00e3o que facilite a implementa\u00e7\u00e3o - Precisamos de algum outro sistema de controle / Dashboards e m\u00e9tricas do produto? - Encontramos algum fluxo alternativo que n\u00e3o foi mapeado?","title":"Refinamento T\u00e9cnico"},{"location":"ddd/technical_refinement/#pontos-negativos-de-pular-o-refinamento","text":"N\u00e3o h\u00e1 vis\u00e3o do qu\u00e3o complexo \u00e9 a solu\u00e7\u00e3o, o que leva a quebra de expectativa quanto \u00e0 entrega Aumento de bugs e d\u00e9bitos t\u00e9cnicos","title":"Pontos Negativos de Pular o Refinamento"},{"location":"ddd/technical_refinement/#spikes-e-pocs-proof-of-concept","text":"Muitas vezes as demandas podem parecer complicadas demais ou ainda n\u00e3o temos uma ideia de como implement\u00e1-las, para isto criamos Spikes (itens de desenvolvimento) para explorar novas solu\u00e7\u00f5es e PoCs (proof of concept) que \u00e9 a implementa\u00e7\u00e3o simpl\u00f3ria de uma id\u00e9ia para comprovar o funcionamento e ader\u00eancia","title":"Spikes e PoCs (Proof of Concept)"},{"location":"ddd/working_with_bounded_contexts/","text":"Trabalhando com Contextos Delimitados Coopera\u00e7\u00e3o Cada contexto \u00e9 feito por um time; Requer disciplina de comunica\u00e7\u00e3o Modelo de Parceria Os times conversam e combinam as integra\u00e7\u00f5es entre eles, tudo de forma negociada. Kernel Compartilhado Contexto compartilhado, que \u00e9 o Kernel. Ex: CRM que \u00e9 mantido pelo mesmo time, onde os dois colaboram no mesmo c\u00f3digo. Este modelo \u00e9 a exce\u00e7\u00e3o :Warning: Tomar cuidado para n\u00e3o criar duplica\u00e7\u00e3o de c\u00f3digo Modelo Cliente Fornecedor Contextos dos times desenvolvidos separadamente; H\u00e1 alguma depend\u00eancia por conta de algum servi\u00e7o Os times t\u00eam o poder de decidir como querem integrar Fornecedor (upstream) \u00e9 o time que prov\u00ea o servi\u00e7o Cliente (downstream) \u00e9 o time que o consome Conformista: temos que nos conformar com o formato que o fornecedor disponibiliza e adequar \u00e0 nossa solu\u00e7\u00e3o Camada Anti Corrup\u00e7\u00e3o (ACL) No DDD pensamos nesta camada como uma barreira para proteger o cliente das altera\u00e7\u00f5es do fornecedor. Ent\u00e3o, ela fica entre a integra\u00e7\u00e3o cliente e servi\u00e7o do fornecedor, fazendo a tradu\u00e7\u00e3o do que o fornecedor entrega para o cliente. Mantendo um \u00fanico ponto de altera\u00e7\u00e3o caso o fornecedor imponha alguma mudan\u00e7a, assim, o cliente n\u00e3o \u00e9 afetado. Servi\u00e7o de Host Aberto (OHS) \u00c9 uma interface disponibilizada pelo fornecedor de integra\u00e7\u00e3o para expor os servi\u00e7os para o cliente n\u00e3o precise se adequar, assim o cliente pode se integrar com uma camada padronizada. Isto ajuda o fornecedor a separar os seus desenvolvimentos mais internos dos clientes, assim ele pode evoluir os servi\u00e7os sem se preocupar em quebrar o cliente. Linguagem Publicada (PL) No OHS a linguagem \u00e9 do fornecedor, neste caso o fornecedor cria inst\u00e2ncias customizadas para o cliente utilizando a linguagem que o cliente usa. Caminhos Separados Para times que n\u00e3o conseguem se entender ou se comunicar, como no modelo parceria, neste cen\u00e1rio os times n\u00e3o se integram. Outros motivos: - Custo de integra\u00e7\u00e3o \u00e9 muito maior que o de criar uma solu\u00e7\u00e3o interna - N\u00e3o tem sentido expor o servi\u00e7o a outros contextos Modelo Grande Bola de Lama (BBM) Este modelo (Big Ball of Mud) \u00e9 indicado para sistemas muito grandes e que n\u00e3o tem contextos bem definidos e s\u00e3o inconsistentes. Acontece muito em sistemas legados. As recomenda\u00e7\u00f5es s\u00e3o: - Desenhe uma linha em torno e chame de Grande Bola de Lama; - N\u00e3o tente aplicar nenhum m\u00e9todo sofisticado de modelagem; - Cuidado, pois esta bola de lama pode contaminar outros contextos. Mapa de Contexto \u00c9 um mapa que materializa visualmente todos os nossos contextos delimitados e como eles se integram. Desta forma, temos uma vis\u00e3o estrat\u00e9gica do todo. O mapa conter\u00e1: Contextos delimitados Times Como os contextos se relacionam Camadas de: Servi\u00e7os, ACL, OHS, PL, Fornecedores (upstream) e clientes (downstream) Esta documenta\u00e7\u00e3o \u00e9 viva, sempre ser\u00e1 atualizada.","title":"Trabalhando com Contextos Delimitados"},{"location":"ddd/working_with_bounded_contexts/#trabalhando-com-contextos-delimitados","text":"","title":"Trabalhando com Contextos Delimitados"},{"location":"ddd/working_with_bounded_contexts/#cooperacao","text":"Cada contexto \u00e9 feito por um time; Requer disciplina de comunica\u00e7\u00e3o","title":"Coopera\u00e7\u00e3o"},{"location":"ddd/working_with_bounded_contexts/#modelo-de-parceria","text":"Os times conversam e combinam as integra\u00e7\u00f5es entre eles, tudo de forma negociada.","title":"Modelo de Parceria"},{"location":"ddd/working_with_bounded_contexts/#kernel-compartilhado","text":"Contexto compartilhado, que \u00e9 o Kernel. Ex: CRM que \u00e9 mantido pelo mesmo time, onde os dois colaboram no mesmo c\u00f3digo. Este modelo \u00e9 a exce\u00e7\u00e3o :Warning: Tomar cuidado para n\u00e3o criar duplica\u00e7\u00e3o de c\u00f3digo","title":"Kernel Compartilhado"},{"location":"ddd/working_with_bounded_contexts/#modelo-cliente-fornecedor","text":"Contextos dos times desenvolvidos separadamente; H\u00e1 alguma depend\u00eancia por conta de algum servi\u00e7o Os times t\u00eam o poder de decidir como querem integrar Fornecedor (upstream) \u00e9 o time que prov\u00ea o servi\u00e7o Cliente (downstream) \u00e9 o time que o consome Conformista: temos que nos conformar com o formato que o fornecedor disponibiliza e adequar \u00e0 nossa solu\u00e7\u00e3o","title":"Modelo Cliente Fornecedor"},{"location":"ddd/working_with_bounded_contexts/#camada-anti-corrupcao-acl","text":"No DDD pensamos nesta camada como uma barreira para proteger o cliente das altera\u00e7\u00f5es do fornecedor. Ent\u00e3o, ela fica entre a integra\u00e7\u00e3o cliente e servi\u00e7o do fornecedor, fazendo a tradu\u00e7\u00e3o do que o fornecedor entrega para o cliente. Mantendo um \u00fanico ponto de altera\u00e7\u00e3o caso o fornecedor imponha alguma mudan\u00e7a, assim, o cliente n\u00e3o \u00e9 afetado.","title":"Camada Anti Corrup\u00e7\u00e3o (ACL)"},{"location":"ddd/working_with_bounded_contexts/#servico-de-host-aberto-ohs","text":"\u00c9 uma interface disponibilizada pelo fornecedor de integra\u00e7\u00e3o para expor os servi\u00e7os para o cliente n\u00e3o precise se adequar, assim o cliente pode se integrar com uma camada padronizada. Isto ajuda o fornecedor a separar os seus desenvolvimentos mais internos dos clientes, assim ele pode evoluir os servi\u00e7os sem se preocupar em quebrar o cliente.","title":"Servi\u00e7o de Host Aberto (OHS)"},{"location":"ddd/working_with_bounded_contexts/#linguagem-publicada-pl","text":"No OHS a linguagem \u00e9 do fornecedor, neste caso o fornecedor cria inst\u00e2ncias customizadas para o cliente utilizando a linguagem que o cliente usa.","title":"Linguagem Publicada (PL)"},{"location":"ddd/working_with_bounded_contexts/#caminhos-separados","text":"Para times que n\u00e3o conseguem se entender ou se comunicar, como no modelo parceria, neste cen\u00e1rio os times n\u00e3o se integram. Outros motivos: - Custo de integra\u00e7\u00e3o \u00e9 muito maior que o de criar uma solu\u00e7\u00e3o interna - N\u00e3o tem sentido expor o servi\u00e7o a outros contextos","title":"Caminhos Separados"},{"location":"ddd/working_with_bounded_contexts/#modelo-grande-bola-de-lama-bbm","text":"Este modelo (Big Ball of Mud) \u00e9 indicado para sistemas muito grandes e que n\u00e3o tem contextos bem definidos e s\u00e3o inconsistentes. Acontece muito em sistemas legados. As recomenda\u00e7\u00f5es s\u00e3o: - Desenhe uma linha em torno e chame de Grande Bola de Lama; - N\u00e3o tente aplicar nenhum m\u00e9todo sofisticado de modelagem; - Cuidado, pois esta bola de lama pode contaminar outros contextos.","title":"Modelo Grande Bola de Lama (BBM)"},{"location":"ddd/working_with_bounded_contexts/#mapa-de-contexto","text":"\u00c9 um mapa que materializa visualmente todos os nossos contextos delimitados e como eles se integram. Desta forma, temos uma vis\u00e3o estrat\u00e9gica do todo. O mapa conter\u00e1: Contextos delimitados Times Como os contextos se relacionam Camadas de: Servi\u00e7os, ACL, OHS, PL, Fornecedores (upstream) e clientes (downstream) Esta documenta\u00e7\u00e3o \u00e9 viva, sempre ser\u00e1 atualizada.","title":"Mapa de Contexto"},{"location":"docker/","text":"Docker Aula 1 - Introdu\u00e7\u00e3o Aula 2 - Gerenciamento de Cont\u00eaineres Aula 3 - Orquestra\u00e7\u00e3o de Cont\u00eaineres Aula 3 - Melhores Pr\u00e1ticas Aula 4 - Seguran\u00e7a de Cont\u00eaineres Aula 5 - ECS","title":"Docker"},{"location":"docker/#docker","text":"","title":"Docker"},{"location":"docker/#aula-1-introducao","text":"","title":"Aula 1 - Introdu\u00e7\u00e3o"},{"location":"docker/#aula-2-gerenciamento-de-conteineres","text":"","title":"Aula 2 - Gerenciamento de Cont\u00eaineres"},{"location":"docker/#aula-3-orquestracao-de-conteineres","text":"","title":"Aula 3 - Orquestra\u00e7\u00e3o de Cont\u00eaineres"},{"location":"docker/#aula-3-melhores-praticas","text":"","title":"Aula 3 - Melhores Pr\u00e1ticas"},{"location":"docker/#aula-4-seguranca-de-conteineres","text":"","title":"Aula 4 - Seguran\u00e7a de Cont\u00eaineres"},{"location":"docker/#aula-5-ecs","text":"","title":"Aula 5 - ECS"},{"location":"docker/best_practices/","text":"Boas Pr\u00e1ticas Imagens Buscar utilizar imagens que tem os menores tamanhos e que de\u00eam suporte a todas as funcionalidades que o app precisa Desta forma, al\u00e9m de otimizar os downloads e uploads, estamos reduzindo a superf\u00edcie de vulnerabilidades Vari\u00e1veis de Ambiente Uma das formas que podemos aumentar a seguran\u00e7a \u00e9 utilizar a passagem de argumentos durante o docker build. No Dockerfile: ARG MINHA_VARIAVEL ENV VARIAVEL_DE_AMBIENTE=$MINHA_VARIAVEL Passamos o argumento ap\u00f3s a flag --build-arg docker build -t node-app:arg --build-arg MINHA_VARIAVEL=valor Logs Para ajudar na detec\u00e7\u00e3o de erros, podemos analisar os logs de sa\u00edda de um container: docker container logs {id_do_container} Limpeza de disco Por vezes acumulamos muitos containeres em nosso disco, para exclu\u00ed-las, podemos utilizar o comando docker container prune que todas os containeres que n\u00e3o est\u00e3o em execu\u00e7\u00e3o ser\u00e3o exclu\u00eddos. Para remover as imagens, podemos utilizar os comandos: docker image ls para obter a lista de imagens e seus Ids docker image rm {id_da_image} ou docker image rm -f {id_da_image} para for\u00e7ar a exclus\u00e3o. Artigos Boas Pr\u00e1ticas - Gaspar Barancelli","title":"Boas Pr\u00e1ticas"},{"location":"docker/best_practices/#boas-praticas","text":"","title":"Boas Pr\u00e1ticas"},{"location":"docker/best_practices/#imagens","text":"Buscar utilizar imagens que tem os menores tamanhos e que de\u00eam suporte a todas as funcionalidades que o app precisa Desta forma, al\u00e9m de otimizar os downloads e uploads, estamos reduzindo a superf\u00edcie de vulnerabilidades","title":"Imagens"},{"location":"docker/best_practices/#variaveis-de-ambiente","text":"Uma das formas que podemos aumentar a seguran\u00e7a \u00e9 utilizar a passagem de argumentos durante o docker build. No Dockerfile: ARG MINHA_VARIAVEL ENV VARIAVEL_DE_AMBIENTE=$MINHA_VARIAVEL Passamos o argumento ap\u00f3s a flag --build-arg docker build -t node-app:arg --build-arg MINHA_VARIAVEL=valor","title":"Vari\u00e1veis de Ambiente"},{"location":"docker/best_practices/#logs","text":"Para ajudar na detec\u00e7\u00e3o de erros, podemos analisar os logs de sa\u00edda de um container: docker container logs {id_do_container}","title":"Logs"},{"location":"docker/best_practices/#limpeza-de-disco","text":"Por vezes acumulamos muitos containeres em nosso disco, para exclu\u00ed-las, podemos utilizar o comando docker container prune que todas os containeres que n\u00e3o est\u00e3o em execu\u00e7\u00e3o ser\u00e3o exclu\u00eddos. Para remover as imagens, podemos utilizar os comandos: docker image ls para obter a lista de imagens e seus Ids docker image rm {id_da_image} ou docker image rm -f {id_da_image} para for\u00e7ar a exclus\u00e3o.","title":"Limpeza de disco"},{"location":"docker/best_practices/#artigos","text":"Boas Pr\u00e1ticas - Gaspar Barancelli","title":"Artigos"},{"location":"docker/container_management/","text":"Gerenciamento de Cont\u00eaineres Podemos criar um arquivo Dockerfile na raiz do nosso projeto, que nos ajudar\u00e1 a rodar a aplica\u00e7\u00e3o sem precisar fazer tudo manualmente. Aten\u00e7\u00e3o: o padr\u00e3o do nome do arquivo \u00e9 Dockerfile, caso seja criado como dockerfile (por exemplo) precisaremos especificar o nome do arquivo durante o build Arquivo exemplo # define uma imagem que existe no dockerhub # esta imagem j\u00e1 roda em cima de um linux kernel (debian) e instala o node # se trocassemos por uma imagem do sistema operacional diretamente, precisar\u00edamos instalar o node FROM node:18 # Como estamos executando dentro de um SO, precisamos definir um diret\u00f3rio para que a aplica\u00e7\u00e3o seja executada # caso contr\u00e1rio, ela ser\u00e1 executada dentro do diret\u00f3rio Home WORKDIR /app # copia o arquivo package.json para o diret\u00f3rio atual # desta forma, as pr\u00f3ximas camadas s\u00f3 ser\u00e3o reconstruidas caso o package.json tenha sofrido alguma altera\u00e7\u00e3o # caso este arquivo (que guarda as dependencias do nosso projeto) n\u00e3o tenha sido alterado # as pr\u00f3ximas camadas ser\u00e3o utilizadas do cache COPY package.json . # executa o comando npm install RUN npm install # copia todos os arquivos do diret\u00f3rio atual para o diret\u00f3rio app COPY . . # exp\u00f5e uma porta do container EXPOSE 3000 # executa o comando node app.js # aqui usamos CMD ao inv\u00e9s do RUN pois o RUN \u00e9 executado no momento de build da imagem # j\u00e1 o CMD \u00e9 executado no momento em que o container \u00e9 iniciado # tamb\u00e9m poder\u00edamos usar o ENTRYPOINT - a diferen\u00e7a \u00e9 que com o CMD os argumentos podem # ser substitu\u00eddos via CLI, j\u00e1 no ENTRYPOINT n\u00e3o CMD [ \"node\", \"app.js\" ] Para executar a nossa aplica\u00e7\u00e3o, precisamos criar (build) a imagem. Abrindo o terminal no diret\u00f3rio ra\u00edz do nosso app (diret\u00f3rio que se encontra o Dockerfile) e executamos o comando abaixo. A flag -t cria uma tag para a nossa imagem, auxiliando no gerenciamento de vers\u00f5es. docker build -t node-app:1 . Desta forma, se executarmos o comando docker image ls, teremos uma imagem chamada node-app (coluna repository) com tag 1 Para utilizar outro nome de arquivo Dockerfile, utilizar a flag -f Dockerfile-nome Disponibilizando as imagens Docker Hub - FREE AWS Azure Google Container Passo a passo Na primeira vez, precisamos nos conectar ao docker hub: docker login , se autentique com o seu usu\u00e1rio e senha. Vamos fazer o build da imagem: docker build -t SeuNomeDeUsuario/node-app:tagname para publicar, fa\u00e7a o push para o seu reposit\u00f3rio: docker push SeuNomeDeUsuario/node-app:tagname Redes Todo container precisa de uma rede para interagir no ambiente docker network ls drivers: bridge: ponte entre container e nossa m\u00e1quina com acesso \u00e0 internet host: conecta com a m\u00e1quina local sem acesso \u00e0 internet null: sem nenhum driver - isola a comunica\u00e7\u00e3o com o mundo externo. Indicado para containeres de dados. Desta forma ele \u00e9 acessado apenas na rede local do docker. overlay: para comunica\u00e7\u00e3o entre hosts - ex: comunica\u00e7\u00e3o entre containeres rodando na m\u00e1quina local e containeres rodando em uma VM docker network inspect driver-id conseguimos inspecionar as configura\u00e7\u00f5es de cada driver docker network create --driver bridge nomeDaRede Colocar o container em comunica\u00e7\u00e3o utilizando nosso driver criado. O nome da rede tamb\u00e9m pode ser o id da rede docker network connect nomeDaRede idDoContainerRunning Assim, podemos isolar os containeres que estiverem rodando na rede nomeDaRede dos outros que est\u00e3o rodando no adaptador bridge (criado autom\u00e1ticamente) Volumes S\u00e3o os discos que o container usa aloca peda\u00e7os do nosso disco para utiliza\u00e7\u00e3o do container. docker container run -it --mount type=bind,src=/mnt/meu-disco,dst=/mnt/meu-disco,ro node:3 /bin/bash docker volume create nomeDoVolume docker volume rm nomeDoVolume docker volume inspect nomeDoVolume docker volume prune docker container logs","title":"Gerenciamento de Cont\u00eaineres"},{"location":"docker/container_management/#gerenciamento-de-conteineres","text":"Podemos criar um arquivo Dockerfile na raiz do nosso projeto, que nos ajudar\u00e1 a rodar a aplica\u00e7\u00e3o sem precisar fazer tudo manualmente. Aten\u00e7\u00e3o: o padr\u00e3o do nome do arquivo \u00e9 Dockerfile, caso seja criado como dockerfile (por exemplo) precisaremos especificar o nome do arquivo durante o build Arquivo exemplo # define uma imagem que existe no dockerhub # esta imagem j\u00e1 roda em cima de um linux kernel (debian) e instala o node # se trocassemos por uma imagem do sistema operacional diretamente, precisar\u00edamos instalar o node FROM node:18 # Como estamos executando dentro de um SO, precisamos definir um diret\u00f3rio para que a aplica\u00e7\u00e3o seja executada # caso contr\u00e1rio, ela ser\u00e1 executada dentro do diret\u00f3rio Home WORKDIR /app # copia o arquivo package.json para o diret\u00f3rio atual # desta forma, as pr\u00f3ximas camadas s\u00f3 ser\u00e3o reconstruidas caso o package.json tenha sofrido alguma altera\u00e7\u00e3o # caso este arquivo (que guarda as dependencias do nosso projeto) n\u00e3o tenha sido alterado # as pr\u00f3ximas camadas ser\u00e3o utilizadas do cache COPY package.json . # executa o comando npm install RUN npm install # copia todos os arquivos do diret\u00f3rio atual para o diret\u00f3rio app COPY . . # exp\u00f5e uma porta do container EXPOSE 3000 # executa o comando node app.js # aqui usamos CMD ao inv\u00e9s do RUN pois o RUN \u00e9 executado no momento de build da imagem # j\u00e1 o CMD \u00e9 executado no momento em que o container \u00e9 iniciado # tamb\u00e9m poder\u00edamos usar o ENTRYPOINT - a diferen\u00e7a \u00e9 que com o CMD os argumentos podem # ser substitu\u00eddos via CLI, j\u00e1 no ENTRYPOINT n\u00e3o CMD [ \"node\", \"app.js\" ] Para executar a nossa aplica\u00e7\u00e3o, precisamos criar (build) a imagem. Abrindo o terminal no diret\u00f3rio ra\u00edz do nosso app (diret\u00f3rio que se encontra o Dockerfile) e executamos o comando abaixo. A flag -t cria uma tag para a nossa imagem, auxiliando no gerenciamento de vers\u00f5es. docker build -t node-app:1 . Desta forma, se executarmos o comando docker image ls, teremos uma imagem chamada node-app (coluna repository) com tag 1 Para utilizar outro nome de arquivo Dockerfile, utilizar a flag -f Dockerfile-nome","title":"Gerenciamento de Cont\u00eaineres"},{"location":"docker/container_management/#disponibilizando-as-imagens","text":"Docker Hub - FREE AWS Azure Google Container","title":"Disponibilizando as imagens"},{"location":"docker/container_management/#passo-a-passo","text":"Na primeira vez, precisamos nos conectar ao docker hub: docker login , se autentique com o seu usu\u00e1rio e senha. Vamos fazer o build da imagem: docker build -t SeuNomeDeUsuario/node-app:tagname para publicar, fa\u00e7a o push para o seu reposit\u00f3rio: docker push SeuNomeDeUsuario/node-app:tagname","title":"Passo a passo"},{"location":"docker/container_management/#redes","text":"Todo container precisa de uma rede para interagir no ambiente docker network ls drivers: bridge: ponte entre container e nossa m\u00e1quina com acesso \u00e0 internet host: conecta com a m\u00e1quina local sem acesso \u00e0 internet null: sem nenhum driver - isola a comunica\u00e7\u00e3o com o mundo externo. Indicado para containeres de dados. Desta forma ele \u00e9 acessado apenas na rede local do docker. overlay: para comunica\u00e7\u00e3o entre hosts - ex: comunica\u00e7\u00e3o entre containeres rodando na m\u00e1quina local e containeres rodando em uma VM docker network inspect driver-id conseguimos inspecionar as configura\u00e7\u00f5es de cada driver docker network create --driver bridge nomeDaRede Colocar o container em comunica\u00e7\u00e3o utilizando nosso driver criado. O nome da rede tamb\u00e9m pode ser o id da rede docker network connect nomeDaRede idDoContainerRunning Assim, podemos isolar os containeres que estiverem rodando na rede nomeDaRede dos outros que est\u00e3o rodando no adaptador bridge (criado autom\u00e1ticamente)","title":"Redes"},{"location":"docker/container_management/#volumes","text":"S\u00e3o os discos que o container usa aloca peda\u00e7os do nosso disco para utiliza\u00e7\u00e3o do container. docker container run -it --mount type=bind,src=/mnt/meu-disco,dst=/mnt/meu-disco,ro node:3 /bin/bash docker volume create nomeDoVolume docker volume rm nomeDoVolume docker volume inspect nomeDoVolume docker volume prune docker container logs","title":"Volumes"},{"location":"docker/container_orchestration/","text":"Orquestra\u00e7\u00e3o de Cont\u00e2ineres Docker Compose file \u00c9 um arquivo YAML que define como os cont\u00eaineres de um aplicativo devem ser configurados e orquestrados, especificando servi\u00e7os, redes e volumes. Ele facilita a cria\u00e7\u00e3o e execu\u00e7\u00e3o de ambientes multi-cont\u00eainer de forma simplificada. Escrito em YML tomar cuidado com a identa\u00e7\u00e3o version: '3.9' volumes: mysql_data:{} services: mysql: image: mysql:8.0 volumes: - mysql_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - mysql image: wordpress:latest port: - \"80:80\"- restart: always environment: WORDPRESS_DB_HOST: mysql:3306 volumes: - ./wordpress:/var/www/html A exposi\u00e7\u00e3o de portas no item port: segue a ordem: portaDockerHost:portaContainer No parametro restart: podemos ter os seguintes valores: - no: nunca reinicia - on-failure: reinicia quando ocorre alguma falha em um dos servi\u00e7os - always: reinicia sempre - unless-stopped: reinicia a menos que seja intencional parar Comandos de Partida e Parada Os comandos a seguir sobem o ambiente descrito no docker compose file e tamb\u00e9m os param, respectivamente: > docker compose up > docker compose down","title":"Orquestra\u00e7\u00e3o de Cont\u00e2ineres"},{"location":"docker/container_orchestration/#orquestracao-de-containeres","text":"","title":"Orquestra\u00e7\u00e3o de Cont\u00e2ineres"},{"location":"docker/container_orchestration/#docker-compose-file","text":"\u00c9 um arquivo YAML que define como os cont\u00eaineres de um aplicativo devem ser configurados e orquestrados, especificando servi\u00e7os, redes e volumes. Ele facilita a cria\u00e7\u00e3o e execu\u00e7\u00e3o de ambientes multi-cont\u00eainer de forma simplificada. Escrito em YML tomar cuidado com a identa\u00e7\u00e3o version: '3.9' volumes: mysql_data:{} services: mysql: image: mysql:8.0 volumes: - mysql_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - mysql image: wordpress:latest port: - \"80:80\"- restart: always environment: WORDPRESS_DB_HOST: mysql:3306 volumes: - ./wordpress:/var/www/html A exposi\u00e7\u00e3o de portas no item port: segue a ordem: portaDockerHost:portaContainer No parametro restart: podemos ter os seguintes valores: - no: nunca reinicia - on-failure: reinicia quando ocorre alguma falha em um dos servi\u00e7os - always: reinicia sempre - unless-stopped: reinicia a menos que seja intencional parar","title":"Docker Compose file"},{"location":"docker/container_orchestration/#comandos-de-partida-e-parada","text":"Os comandos a seguir sobem o ambiente descrito no docker compose file e tamb\u00e9m os param, respectivamente: > docker compose up > docker compose down","title":"Comandos de Partida e Parada"},{"location":"docker/container_security/","text":"Seguran\u00e7a de Container\u00eas Docker hub Imagens Confi\u00e1veis Sempre podemos filtrar por: - Docker Official Image: s\u00e3o imagens oficiais do docker, possuem um alto n\u00edvel de credibilidade - Verified Publishers: Empresas que s\u00e3o verificadas pela Docker Hub - Sponsored OSS: S\u00e3o imagens que s\u00e3o patrocinadas por serem open source Sem nenhuma destas 3 flags, ficamos expostos a imagens que podem conter scripts maliciosos Podemos habilitar em nosso ambiente a configura\u00e7\u00e3o a seguir para que s\u00f3 seja feito download de imagens com um dos selos de seguran\u00e7a: export DOCKER_CONTANTE_TRUST=1 Atualiza\u00e7\u00f5es de Imagens A cada novo release de imagens \u00e9 comum que al\u00e9m de melhorias ela tenha corre\u00e7\u00f5es de vulnerabilidades. Por isto, \u00e9 importante manter as vers\u00f5es sempre atualizadas. Vari\u00e1veis de ambiente Onde podemos salvar nossas vari\u00e1veis com valores sens\u00edveis para serem recuperadas no momento de montar a imagem, geralmente em um pipeline de CD. Exemplos: Docker Secrets (docker hub), secret manager (aws), key vault (azure). As vari\u00e1veis de ambiente configuradas utilizando as camadas de ARG e ENV potencialmente poderiam ser expostas ao ter acesso ao console do container em execu\u00e7\u00e3o. Usu\u00e1rio/Root Utilizar o usu\u00e1rio root na imagem para executar a aplica\u00e7\u00e3o deixa em aberto o acesso total a todos os componentes do SO. Podemos resolver isto criando usu\u00e1rios com mais restri\u00e7\u00f5es de acesso: RUN adduser john USER john A partir da camada USER todos os comandos ser\u00e3o executados pelo usu\u00e1rio john . Quando n\u00e3o configuramos nenhum usu\u00e1rio, todos os comandos ser\u00e3o sempre executados com o usu\u00e1rio root Ferramenta de an\u00e1lise de vulnerabilidades Trivy: \u00e9 uma plataforma open source para an\u00e1lise de vulnerabilidades de imagens, sistemas de arquivos, reposit\u00f3rios git, VMI, kubernetes e aws O escaneamento do Trivy pode encontrar: pacotes e depend\u00eancias de software em uso (SBOM), vulnerabilidades conhecidas, problemas em IaC e configura\u00e7\u00f5es incorretas, informa\u00e7\u00f5es sens\u00edveis e segredos e licen\u00e7as de software. Documenta\u00e7\u00e3o Utiliza\u00e7\u00e3o: Download do bin\u00e1rio: wget https://github.com/aquasecurity/trivy/releases/download/v0.48.0/trivy_0.48.0_Linux-64bit.tar.gz && tar -xzf trivy_0.48.0_Linux-64bit.tar.gz Movendo para o bin\u00e1rio do linux: sudo mv trivy /usr/local/bin/ Verificando a instala\u00e7\u00e3o: trivy version Executando a an\u00e1lise de uma imagem: trivy image nome-da-img:tag ser\u00e1 retornada uma lista com diversas vulnerabilidades e detec\u00e7\u00f5es sobre a imagem, como o SO utilizado. Desta forma, as vulnerabilidades que s\u00e3o conhecidas podem ser tratadas com a sugest\u00e3o de corre\u00e7\u00e3o indicada na URL do relat\u00f3rio. Flags Efeito severity filtra por severidade vulnerabilidade","title":"Seguran\u00e7a de Container\u00eas"},{"location":"docker/container_security/#seguranca-de-containeres","text":"","title":"Seguran\u00e7a de Container\u00eas"},{"location":"docker/container_security/#docker-hub","text":"","title":"Docker hub"},{"location":"docker/container_security/#imagens-confiaveis","text":"Sempre podemos filtrar por: - Docker Official Image: s\u00e3o imagens oficiais do docker, possuem um alto n\u00edvel de credibilidade - Verified Publishers: Empresas que s\u00e3o verificadas pela Docker Hub - Sponsored OSS: S\u00e3o imagens que s\u00e3o patrocinadas por serem open source Sem nenhuma destas 3 flags, ficamos expostos a imagens que podem conter scripts maliciosos Podemos habilitar em nosso ambiente a configura\u00e7\u00e3o a seguir para que s\u00f3 seja feito download de imagens com um dos selos de seguran\u00e7a: export DOCKER_CONTANTE_TRUST=1","title":"Imagens Confi\u00e1veis"},{"location":"docker/container_security/#atualizacoes-de-imagens","text":"A cada novo release de imagens \u00e9 comum que al\u00e9m de melhorias ela tenha corre\u00e7\u00f5es de vulnerabilidades. Por isto, \u00e9 importante manter as vers\u00f5es sempre atualizadas.","title":"Atualiza\u00e7\u00f5es de Imagens"},{"location":"docker/container_security/#variaveis-de-ambiente","text":"Onde podemos salvar nossas vari\u00e1veis com valores sens\u00edveis para serem recuperadas no momento de montar a imagem, geralmente em um pipeline de CD. Exemplos: Docker Secrets (docker hub), secret manager (aws), key vault (azure). As vari\u00e1veis de ambiente configuradas utilizando as camadas de ARG e ENV potencialmente poderiam ser expostas ao ter acesso ao console do container em execu\u00e7\u00e3o.","title":"Vari\u00e1veis de ambiente"},{"location":"docker/container_security/#usuarioroot","text":"Utilizar o usu\u00e1rio root na imagem para executar a aplica\u00e7\u00e3o deixa em aberto o acesso total a todos os componentes do SO. Podemos resolver isto criando usu\u00e1rios com mais restri\u00e7\u00f5es de acesso: RUN adduser john USER john A partir da camada USER todos os comandos ser\u00e3o executados pelo usu\u00e1rio john . Quando n\u00e3o configuramos nenhum usu\u00e1rio, todos os comandos ser\u00e3o sempre executados com o usu\u00e1rio root","title":"Usu\u00e1rio/Root"},{"location":"docker/container_security/#ferramenta-de-analise-de-vulnerabilidades","text":"Trivy: \u00e9 uma plataforma open source para an\u00e1lise de vulnerabilidades de imagens, sistemas de arquivos, reposit\u00f3rios git, VMI, kubernetes e aws O escaneamento do Trivy pode encontrar: pacotes e depend\u00eancias de software em uso (SBOM), vulnerabilidades conhecidas, problemas em IaC e configura\u00e7\u00f5es incorretas, informa\u00e7\u00f5es sens\u00edveis e segredos e licen\u00e7as de software. Documenta\u00e7\u00e3o Utiliza\u00e7\u00e3o: Download do bin\u00e1rio: wget https://github.com/aquasecurity/trivy/releases/download/v0.48.0/trivy_0.48.0_Linux-64bit.tar.gz && tar -xzf trivy_0.48.0_Linux-64bit.tar.gz Movendo para o bin\u00e1rio do linux: sudo mv trivy /usr/local/bin/ Verificando a instala\u00e7\u00e3o: trivy version Executando a an\u00e1lise de uma imagem: trivy image nome-da-img:tag ser\u00e1 retornada uma lista com diversas vulnerabilidades e detec\u00e7\u00f5es sobre a imagem, como o SO utilizado. Desta forma, as vulnerabilidades que s\u00e3o conhecidas podem ser tratadas com a sugest\u00e3o de corre\u00e7\u00e3o indicada na URL do relat\u00f3rio. Flags Efeito severity filtra por severidade vulnerabilidade","title":"Ferramenta de an\u00e1lise de vulnerabilidades"},{"location":"docker/ecs/","text":"ECS AWS Elastic Container Registry \u00c9 um servi\u00e7o de orquestra\u00e7\u00e3o de cont\u00eaineres Pode ser executado com: EC2, AWS Fargate ou Amazon ECS Anywhere Tag Immutability N\u00e3o permite fazer overwrite em uma imagem:tag j\u00e1 criada. Te obriga a mudar a tag para fazer o upload da imagem","title":"ECS"},{"location":"docker/ecs/#ecs","text":"AWS Elastic Container Registry \u00c9 um servi\u00e7o de orquestra\u00e7\u00e3o de cont\u00eaineres Pode ser executado com: EC2, AWS Fargate ou Amazon ECS Anywhere","title":"ECS"},{"location":"docker/ecs/#tag-immutability","text":"N\u00e3o permite fazer overwrite em uma imagem:tag j\u00e1 criada. Te obriga a mudar a tag para fazer o upload da imagem","title":"Tag Immutability"},{"location":"docker/introduction/","text":"Introdu\u00e7\u00e3o ao Docker 3 processos do linux que fazem toda a diferen\u00e7a: Kernel, CGroup e Namespaces no windows o docker precisa do wsl na vers\u00e3o 2 docker hub: reposit\u00f3rio de imagens docker docker file: onde escrevemos os comandos que ser\u00e3o executados automaticamente assim que o container for iniciado cmds a\u00e7\u00e3o docker version docker mostra um help de comandos docker container run [nome da imagem] baixa e executa a img docker pull [nome da imagem] baixa a img docker container ls lista os containeres em execu\u00e7\u00e3o docker container ls -la lista os containeres j\u00e1 executados docker image ls lista as imagens que existem localmente (j\u00e1 baixadas) docker container run -it node:18-slim Roda o container em modo interativo, assim ele n\u00e3o finaliza e abre o console no container docker container kill [id do container] finalizar execu\u00e7\u00e3o do container docker container run -d [nome da imagem] roda em modo daemon, em segundo plano, sem travar o console atual docker container stats [id do container] mostra os status do container docker container attach [id do container] entra no container em execu\u00e7\u00e3o (console) docker container start [id do container] docker container restart [id do container] docker container stop [id do container] docker container pause [id do container] docker container unpause [id do container] docker container rm [id do container] Remove um container que n\u00e3o est\u00e1 em execu\u00e7\u00e3o docker container rm -f [id do container] Remove um container de forma for\u00e7ada docker container top [id do container] Mostra uma lista de processos rodando atualmente no container","title":"Introdu\u00e7\u00e3o ao Docker"},{"location":"docker/introduction/#introducao-ao-docker","text":"3 processos do linux que fazem toda a diferen\u00e7a: Kernel, CGroup e Namespaces no windows o docker precisa do wsl na vers\u00e3o 2 docker hub: reposit\u00f3rio de imagens docker docker file: onde escrevemos os comandos que ser\u00e3o executados automaticamente assim que o container for iniciado cmds a\u00e7\u00e3o docker version docker mostra um help de comandos docker container run [nome da imagem] baixa e executa a img docker pull [nome da imagem] baixa a img docker container ls lista os containeres em execu\u00e7\u00e3o docker container ls -la lista os containeres j\u00e1 executados docker image ls lista as imagens que existem localmente (j\u00e1 baixadas) docker container run -it node:18-slim Roda o container em modo interativo, assim ele n\u00e3o finaliza e abre o console no container docker container kill [id do container] finalizar execu\u00e7\u00e3o do container docker container run -d [nome da imagem] roda em modo daemon, em segundo plano, sem travar o console atual docker container stats [id do container] mostra os status do container docker container attach [id do container] entra no container em execu\u00e7\u00e3o (console) docker container start [id do container] docker container restart [id do container] docker container stop [id do container] docker container pause [id do container] docker container unpause [id do container] docker container rm [id do container] Remove um container que n\u00e3o est\u00e1 em execu\u00e7\u00e3o docker container rm -f [id do container] Remove um container de forma for\u00e7ada docker container top [id do container] Mostra uma lista de processos rodando atualmente no container","title":"Introdu\u00e7\u00e3o ao Docker"},{"location":"kubernetes/","text":"Kubernetes Kubernetes \u00e9 um sistema de orquestra\u00e7\u00e3o de cont\u00eaineres de c\u00f3digo aberto que automatiza a implanta\u00e7\u00e3o, escalonamento e gerenciamento de aplica\u00e7\u00f5es em cont\u00eaineres. Ele permite que voc\u00ea agrupe cont\u00eaineres em pods, que podem ser gerenciados e escalados de forma eficiente. Kubernetes lida com a distribui\u00e7\u00e3o de cargas de trabalho, gerenciamento de estado e recupera\u00e7\u00e3o de falhas. Oferece recursos como balanceamento de carga, armazenamento persistente e gest\u00e3o de configura\u00e7\u00e3o. \u00c9 amplamente utilizado para manter aplica\u00e7\u00f5es altamente dispon\u00edveis e escal\u00e1veis em ambientes de produ\u00e7\u00e3o. Pods e N\u00f3s (Nodes) Pods s\u00e3o a menor unidade de execu\u00e7\u00e3o no Kubernetes, consistindo em um ou mais cont\u00eaineres que compartilham o mesmo ambiente de rede e armazenamento. Eles agrupam processos relacionados para funcionarem juntos de forma coesa e s\u00e3o executados em n\u00f3s (nodes). N\u00f3s s\u00e3o m\u00e1quinas f\u00edsicas ou virtuais que comp\u00f5em o cluster Kubernetes e executam os pods. Cada n\u00f3 possui um agente chamado Kubelet que gerencia a execu\u00e7\u00e3o dos pods, al\u00e9m de recursos como CPU, mem\u00f3ria e armazenamento. O Kubernetes gerencia a distribui\u00e7\u00e3o de pods pelos n\u00f3s, garantindo alta disponibilidade e escalabilidade das aplica\u00e7\u00f5es. Apronfundar conhecimento em Pods e Nodes O que \u00e9 um cluster? Um cluster no contexto do Kubernetes \u00e9 um conjunto de m\u00e1quinas (n\u00f3s) que trabalham juntas para executar e gerenciar aplica\u00e7\u00f5es em cont\u00eaineres de forma distribu\u00edda e coordenada. O cluster inclui: N\u00f3 Mestre (Control Plane): Gerencia o cluster e coordena todas as opera\u00e7\u00f5es, como escalonamento, aloca\u00e7\u00e3o de pods e monitoramento de sa\u00fade. Ele \u00e9 respons\u00e1vel por tomar decis\u00f5es sobre onde os pods ser\u00e3o executados e por manter o estado desejado do sistema. N\u00f3s de Trabalho (Worker Nodes): Executam os cont\u00eaineres dentro dos pods e fornecem os recursos de CPU, mem\u00f3ria e armazenamento para as aplica\u00e7\u00f5es. Cada n\u00f3 de trabalho \u00e9 gerenciado pelo n\u00f3 mestre. O Kubernetes utiliza o cluster para distribuir e balancear a carga de trabalho, garantindo que as aplica\u00e7\u00f5es rodem de forma eficiente e escal\u00e1vel, al\u00e9m de oferecer resili\u00eancia e alta disponibilidade. Pr\u00f3ximos T\u00f3picos Pods e Nodes Kubectl ConfigMap Probes ReplicaSet e Deployment Servi\u00e7os Armazenamento Horizontal Pod Autoscaler (HPA)","title":"Kubernetes"},{"location":"kubernetes/#kubernetes","text":"Kubernetes \u00e9 um sistema de orquestra\u00e7\u00e3o de cont\u00eaineres de c\u00f3digo aberto que automatiza a implanta\u00e7\u00e3o, escalonamento e gerenciamento de aplica\u00e7\u00f5es em cont\u00eaineres. Ele permite que voc\u00ea agrupe cont\u00eaineres em pods, que podem ser gerenciados e escalados de forma eficiente. Kubernetes lida com a distribui\u00e7\u00e3o de cargas de trabalho, gerenciamento de estado e recupera\u00e7\u00e3o de falhas. Oferece recursos como balanceamento de carga, armazenamento persistente e gest\u00e3o de configura\u00e7\u00e3o. \u00c9 amplamente utilizado para manter aplica\u00e7\u00f5es altamente dispon\u00edveis e escal\u00e1veis em ambientes de produ\u00e7\u00e3o.","title":"Kubernetes"},{"location":"kubernetes/#pods-e-nos-nodes","text":"Pods s\u00e3o a menor unidade de execu\u00e7\u00e3o no Kubernetes, consistindo em um ou mais cont\u00eaineres que compartilham o mesmo ambiente de rede e armazenamento. Eles agrupam processos relacionados para funcionarem juntos de forma coesa e s\u00e3o executados em n\u00f3s (nodes). N\u00f3s s\u00e3o m\u00e1quinas f\u00edsicas ou virtuais que comp\u00f5em o cluster Kubernetes e executam os pods. Cada n\u00f3 possui um agente chamado Kubelet que gerencia a execu\u00e7\u00e3o dos pods, al\u00e9m de recursos como CPU, mem\u00f3ria e armazenamento. O Kubernetes gerencia a distribui\u00e7\u00e3o de pods pelos n\u00f3s, garantindo alta disponibilidade e escalabilidade das aplica\u00e7\u00f5es. Apronfundar conhecimento em Pods e Nodes","title":"Pods e N\u00f3s (Nodes)"},{"location":"kubernetes/#o-que-e-um-cluster","text":"Um cluster no contexto do Kubernetes \u00e9 um conjunto de m\u00e1quinas (n\u00f3s) que trabalham juntas para executar e gerenciar aplica\u00e7\u00f5es em cont\u00eaineres de forma distribu\u00edda e coordenada. O cluster inclui: N\u00f3 Mestre (Control Plane): Gerencia o cluster e coordena todas as opera\u00e7\u00f5es, como escalonamento, aloca\u00e7\u00e3o de pods e monitoramento de sa\u00fade. Ele \u00e9 respons\u00e1vel por tomar decis\u00f5es sobre onde os pods ser\u00e3o executados e por manter o estado desejado do sistema. N\u00f3s de Trabalho (Worker Nodes): Executam os cont\u00eaineres dentro dos pods e fornecem os recursos de CPU, mem\u00f3ria e armazenamento para as aplica\u00e7\u00f5es. Cada n\u00f3 de trabalho \u00e9 gerenciado pelo n\u00f3 mestre. O Kubernetes utiliza o cluster para distribuir e balancear a carga de trabalho, garantindo que as aplica\u00e7\u00f5es rodem de forma eficiente e escal\u00e1vel, al\u00e9m de oferecer resili\u00eancia e alta disponibilidade.","title":"O que \u00e9 um cluster?"},{"location":"kubernetes/#proximos-topicos","text":"","title":"Pr\u00f3ximos T\u00f3picos"},{"location":"kubernetes/#pods-e-nodes","text":"","title":"Pods e Nodes"},{"location":"kubernetes/#kubectl","text":"","title":"Kubectl"},{"location":"kubernetes/#configmap","text":"","title":"ConfigMap"},{"location":"kubernetes/#probes","text":"","title":"Probes"},{"location":"kubernetes/#replicaset-e-deployment","text":"","title":"ReplicaSet e Deployment"},{"location":"kubernetes/#servicos","text":"","title":"Servi\u00e7os"},{"location":"kubernetes/#armazenamento","text":"","title":"Armazenamento"},{"location":"kubernetes/#horizontal-pod-autoscaler-hpa","text":"","title":"Horizontal Pod Autoscaler (HPA)"},{"location":"kubernetes/configMap/","text":"ConfigMap O ConfigMap \u00e9 um recurso do Kubernetes que permite separar as configura\u00e7\u00f5es de um container de seus artefatos de implanta\u00e7\u00e3o. Isso significa que \u00e9 poss\u00edvel armazenar as configura\u00e7\u00f5es em um local centralizado e gerenci\u00e1-las separadamente do container.As configura\u00e7\u00f5es podem ser armazenadas em um ConfigMap em um arquivo YAML. Essas configura\u00e7\u00f5es podem ser injetadas em um container de v\u00e1rias maneiras, incluindo como vari\u00e1veis de ambiente, como arquivos montados ou como argumentos de linha de comando. Comando para criar um configmap: kubectl create configmap Obtendo os dados do ConfigMap game-config: kubectl describe configmaps game-config A sa\u00edda ser\u00e1 parecida com esta: Name: game-config Namespace: default Labels: <none> Annotations: <none> Data ==== game.properties: ---- enemies=aliens lives=3 enemies.cheat=true enemies.cheat.level=noGoodRotten secret.code.passphrase=UUDDLRLRBABAS secret.code.allowed=true secret.code.lives=30 ui.properties: ---- color.good=purple color.bad=yellow allow.textmode=true how.nice.to.look=fairlyNice Voltar para Kubernetes","title":"ConfigMap"},{"location":"kubernetes/configMap/#configmap","text":"O ConfigMap \u00e9 um recurso do Kubernetes que permite separar as configura\u00e7\u00f5es de um container de seus artefatos de implanta\u00e7\u00e3o. Isso significa que \u00e9 poss\u00edvel armazenar as configura\u00e7\u00f5es em um local centralizado e gerenci\u00e1-las separadamente do container.As configura\u00e7\u00f5es podem ser armazenadas em um ConfigMap em um arquivo YAML. Essas configura\u00e7\u00f5es podem ser injetadas em um container de v\u00e1rias maneiras, incluindo como vari\u00e1veis de ambiente, como arquivos montados ou como argumentos de linha de comando. Comando para criar um configmap: kubectl create configmap Obtendo os dados do ConfigMap game-config: kubectl describe configmaps game-config A sa\u00edda ser\u00e1 parecida com esta: Name: game-config Namespace: default Labels: <none> Annotations: <none> Data ==== game.properties: ---- enemies=aliens lives=3 enemies.cheat=true enemies.cheat.level=noGoodRotten secret.code.passphrase=UUDDLRLRBABAS secret.code.allowed=true secret.code.lives=30 ui.properties: ---- color.good=purple color.bad=yellow allow.textmode=true how.nice.to.look=fairlyNice Voltar para Kubernetes","title":"ConfigMap"},{"location":"kubernetes/horizontal_pod_autoscaler_HPA/","text":"Horizontal Pod Autoscaler (HPA) Respons\u00e1vel por aumentar ou diminuir automaticamente o n\u00famero de pods (carga de trabalho) por meio de m\u00e9tricas como utiliza\u00e7\u00e3o de CPU, mem\u00f3ria, input/output, m\u00e9tricas customizadas ou m\u00e9tricas de softwares terceiros como Prometheus. A verifica\u00e7\u00e3o de escala autom\u00e1tica \u00e9 implementada em formato de loop, podendo configurar o intervalo de verifica\u00e7\u00e3o pela chave --horizontal-pod-autoscaler-sync-period configurada no kube-controller-manager Voltar para Kubernetes","title":"Horizontal Pod Autoscaler (HPA)"},{"location":"kubernetes/horizontal_pod_autoscaler_HPA/#horizontal-pod-autoscaler-hpa","text":"Respons\u00e1vel por aumentar ou diminuir automaticamente o n\u00famero de pods (carga de trabalho) por meio de m\u00e9tricas como utiliza\u00e7\u00e3o de CPU, mem\u00f3ria, input/output, m\u00e9tricas customizadas ou m\u00e9tricas de softwares terceiros como Prometheus. A verifica\u00e7\u00e3o de escala autom\u00e1tica \u00e9 implementada em formato de loop, podendo configurar o intervalo de verifica\u00e7\u00e3o pela chave --horizontal-pod-autoscaler-sync-period configurada no kube-controller-manager Voltar para Kubernetes","title":"Horizontal Pod Autoscaler (HPA)"},{"location":"kubernetes/kubectl/","text":"Kubectl CLI que permite interagir com um cluster kubernetes Se conecta com o cluster via api RESTful Kubeconfig: vari\u00e1veis para configurar a conex\u00e3o com o cluster Mapa de comandos Digite o comando abaixo para obter um mapa de todos os comandos suportados pelo CLI kubectl Gerenciando PODs Cria um pod usando o comando run, com o nome nginx, configurando a imagem e a porta como flags kubectl run nginx --image=nginx:latest --port=80 Obter uma lista de pods do cluster kubectl get pods Deletar o pod kubectl delete pod nginx Voltar para Kubernetes","title":"Kubectl"},{"location":"kubernetes/kubectl/#kubectl","text":"CLI que permite interagir com um cluster kubernetes Se conecta com o cluster via api RESTful Kubeconfig: vari\u00e1veis para configurar a conex\u00e3o com o cluster","title":"Kubectl"},{"location":"kubernetes/kubectl/#mapa-de-comandos","text":"Digite o comando abaixo para obter um mapa de todos os comandos suportados pelo CLI kubectl","title":"Mapa de comandos"},{"location":"kubernetes/kubectl/#gerenciando-pods","text":"Cria um pod usando o comando run, com o nome nginx, configurando a imagem e a porta como flags kubectl run nginx --image=nginx:latest --port=80 Obter uma lista de pods do cluster kubectl get pods Deletar o pod kubectl delete pod nginx Voltar para Kubernetes","title":"Gerenciando PODs"},{"location":"kubernetes/pods_and_nodes/","text":"Pods e Nodes aprofundando o conhecimento Componentes do Cluster Master Node \u00c9 um node que \u00e9 repons\u00e1vel por gerenciar os outros nodes, ele conta com m\u00f3dulos como: controller manager, scheduler e etcd. Este node tem controle dos outros nodes - conhecidos como workers, e consegue escal\u00e1-los de modo que libere ou aumente recursos para que os pods possam trabalhar corretamente. Worker Node S\u00e3o nodes que executam os pods e outros recursos Etcd \u00c9 um banco de dados distribu\u00eddo que armazena as configura\u00e7\u00f5es do cluster e estados dos objetos kubelet \u00c9 um agente que \u00e9 executado em cada node do cluster, que gerencia os pods contidos nele. Kube-proxy \u00c9 respons\u00e1vel por estabelecer a comunica\u00e7\u00e3o de rede entre os pods no cluster Comunica\u00e7\u00e3o e rede Os pods contidos em um node podem se comunicar com todos os pods no mesmo cluster (mesmo que em outros nodes) por meio de endere\u00e7os de ip internos. O que s\u00e3o pods? \u00c9 uma abstra\u00e7\u00e3o do kubernetes para a execu\u00e7\u00e3o de um \u00fanico processo. Executando dentro de um pod podemos ter um ou mais conteineres. S\u00e3o criados e exclu\u00eddos conforme a necessidade, o que permite um alto gerenciamento de recursos. Os Pods s\u00e3o criados a partir de defini\u00e7\u00f5es YAML ou JSON, que especificam quais containers devem ser executados dentro do Pod, suas imagens e as portas em que cada container deve ouvir. Quando ele \u00e9 criado, recebe um endere\u00e7o IP interno dentro do cluster, permitindo que outros Pods se comuniquem com ele. R\u00f3tulos Os r\u00f3tulos s\u00e3o pares de chave-valor que s\u00e3o atribu\u00eddos aos objetos no Kubernetes, como Pods, Servi\u00e7os, Application Controllers, entre outros. Eles s\u00e3o usados para identificar, categorizar e selecionar objetos para opera\u00e7\u00f5es de gerenciamento, como escalonamento e exclus\u00e3o Usabilidade: Designar objetos para desenvolvimento, teste e produ\u00e7\u00e3o Adicionar tags de vers\u00e3o Classificar um objeto usando tags Anota\u00e7\u00f5es As anota\u00e7\u00f5es, por outro lado, s\u00e3o pares de chave-valor opcionais que podem ser adicionadas a objetos no Kubernetes. Eles s\u00e3o usados para adicionar metadados adicionais aos objetos, como informa\u00e7\u00f5es de depura\u00e7\u00e3o, documenta\u00e7\u00e3o e pol\u00edticas de seguran\u00e7a. Quais s\u00e3o as principais diferen\u00e7as entre pods e nodes? Por que separar em dois n\u00edveis? 1. Separa\u00e7\u00e3o de Responsabilidades: Pods agrupam cont\u00eaineres que t\u00eam uma rela\u00e7\u00e3o estreita e precisam compartilhar recursos (como volumes e rede). Esses cont\u00eaineres s\u00e3o geralmente interdependentes e, por isso, precisam estar no mesmo ambiente de execu\u00e7\u00e3o. Por exemplo, um pod pode conter uma aplica\u00e7\u00e3o e um cont\u00eainer auxiliar que faz logging ou monitoramento dessa aplica\u00e7\u00e3o. N\u00f3s s\u00e3o unidades de infraestrutura (m\u00e1quinas f\u00edsicas ou virtuais) que fornecem os recursos computacionais (CPU, mem\u00f3ria, armazenamento) para executar os pods. Um n\u00f3 pode hospedar v\u00e1rios pods, cada um com diferentes fun\u00e7\u00f5es, de diferentes partes do sistema. 2. Escalabilidade e Flexibilidade: Se voc\u00ea colocar todos os cont\u00eaineres em um \u00fanico pod, voc\u00ea perde a granularidade no controle de escala. Pods s\u00e3o pensados para serem pequenos, encapsulando um ou poucos cont\u00eaineres interdependentes. Ao escalar um pod, voc\u00ea replica exatamente o que h\u00e1 dentro dele. Exemplo: Se voc\u00ea tem uma API e um banco de dados no mesmo pod, ao escalar esse pod, voc\u00ea n\u00e3o pode escalar a API separadamente do banco de dados, mesmo que a API precise de mais replicas, enquanto o banco n\u00e3o. Escalando pods separados: Ao ter pods separados (ex.: um para a API, outro para o banco de dados), voc\u00ea pode escalar a API independente do banco. Isso te d\u00e1 flexibilidade para adaptar cada parte da sua aplica\u00e7\u00e3o conforme a demanda. 3. Gerenciamento de Recursos: N\u00f3s permitem a otimiza\u00e7\u00e3o do uso de recursos. Em um cluster, Kubernetes distribui automaticamente os pods entre diferentes n\u00f3s, garantindo um balanceamento eficiente da carga. Se todos os seus pods estivessem em um \u00fanico n\u00f3, voc\u00ea estaria limitado pela capacidade de CPU, mem\u00f3ria e armazenamento desse n\u00f3 espec\u00edfico. Se esse n\u00f3 falhar, todos os pods falhariam juntos. Com m\u00faltiplos n\u00f3s, o Kubernetes pode distribuir a carga e garantir alta disponibilidade. 4. Resili\u00eancia e Isolamento: Ao separar seus cont\u00eaineres em pods menores e independentes, voc\u00ea garante melhor isolamento entre diferentes componentes da sua aplica\u00e7\u00e3o. Se um cont\u00eainer dentro de um pod falha, o Kubernetes pode reiniciar apenas esse pod, sem impactar os outros pods no n\u00f3. Se voc\u00ea colocar todos os cont\u00eaineres em um \u00fanico pod, qualquer falha em um dos cont\u00eaineres pode potencialmente afetar outros, j\u00e1 que eles compartilham o mesmo ciclo de vida. Isso tamb\u00e9m prejudicaria a capacidade de isolar falhas e limitar danos. 5. Alta Disponibilidade: Distribuir pods entre n\u00f3s \u00e9 uma pr\u00e1tica essencial para garantir a alta disponibilidade. Ao espalhar seus pods entre diferentes n\u00f3s, voc\u00ea minimiza o risco de falhas catastr\u00f3ficas. Se um n\u00f3 cair, apenas os pods nele s\u00e3o afetados, e o Kubernetes pode rapidamente realocar os pods em outros n\u00f3s dispon\u00edveis. Se voc\u00ea tiver apenas um n\u00f3 e ele falhar, todas as suas aplica\u00e7\u00f5es caem, independente de quantos pods voc\u00ea tem. 6. Otimiza\u00e7\u00e3o de Carga e Uso de Recursos: N\u00f3 \u00e9 a unidade de infraestrutura f\u00edsica/virtual que prov\u00ea CPU, mem\u00f3ria e armazenamento. Kubernetes gerencia os recursos dentro dos n\u00f3s de forma eficiente, colocando mais pods em n\u00f3s subutilizados e garantindo que a carga seja bem distribu\u00edda no cluster. Escalar n\u00f3s inteiros faz sentido quando os n\u00f3s est\u00e3o sobrecarregados ou sem recursos suficientes para hospedar mais pods. Mas voc\u00ea ainda quer o controle granular para escalar individualmente os pods que realmente precisam de mais inst\u00e2ncias, ao inv\u00e9s de escalar todos os cont\u00eaineres dentro de um n\u00f3 ou pod. Resumo Pods permitem agrupar cont\u00eaineres interdependentes que precisam ser escalados juntos e compartilhar recursos. N\u00f3s s\u00e3o unidades de infraestrutura que suportam a execu\u00e7\u00e3o de v\u00e1rios pods e permitem a distribui\u00e7\u00e3o de carga. A escalabilidade de pods separados te d\u00e1 flexibilidade para ajustar recursos e desempenho por servi\u00e7o, enquanto escalar n\u00f3s te permite aumentar a capacidade de todo o cluster. Distribuir pods em v\u00e1rios n\u00f3s melhora a resili\u00eancia e alta disponibilidade. Portanto, ter um pod por n\u00f3 ou todos os cont\u00eaineres em um \u00fanico pod eliminaria muitos dos benef\u00edcios do Kubernetes, como gerenciamento de recursos, resili\u00eancia e escalabilidade granular. Voltar para Kubernetes","title":"Pods e Nodes aprofundando o conhecimento"},{"location":"kubernetes/pods_and_nodes/#pods-e-nodes-aprofundando-o-conhecimento","text":"","title":"Pods e Nodes aprofundando o conhecimento"},{"location":"kubernetes/pods_and_nodes/#componentes-do-cluster","text":"","title":"Componentes do Cluster"},{"location":"kubernetes/pods_and_nodes/#master-node","text":"\u00c9 um node que \u00e9 repons\u00e1vel por gerenciar os outros nodes, ele conta com m\u00f3dulos como: controller manager, scheduler e etcd. Este node tem controle dos outros nodes - conhecidos como workers, e consegue escal\u00e1-los de modo que libere ou aumente recursos para que os pods possam trabalhar corretamente.","title":"Master Node"},{"location":"kubernetes/pods_and_nodes/#worker-node","text":"S\u00e3o nodes que executam os pods e outros recursos","title":"Worker Node"},{"location":"kubernetes/pods_and_nodes/#etcd","text":"\u00c9 um banco de dados distribu\u00eddo que armazena as configura\u00e7\u00f5es do cluster e estados dos objetos","title":"Etcd"},{"location":"kubernetes/pods_and_nodes/#kubelet","text":"\u00c9 um agente que \u00e9 executado em cada node do cluster, que gerencia os pods contidos nele.","title":"kubelet"},{"location":"kubernetes/pods_and_nodes/#kube-proxy","text":"\u00c9 respons\u00e1vel por estabelecer a comunica\u00e7\u00e3o de rede entre os pods no cluster","title":"Kube-proxy"},{"location":"kubernetes/pods_and_nodes/#comunicacao-e-rede","text":"Os pods contidos em um node podem se comunicar com todos os pods no mesmo cluster (mesmo que em outros nodes) por meio de endere\u00e7os de ip internos.","title":"Comunica\u00e7\u00e3o e rede"},{"location":"kubernetes/pods_and_nodes/#o-que-sao-pods","text":"\u00c9 uma abstra\u00e7\u00e3o do kubernetes para a execu\u00e7\u00e3o de um \u00fanico processo. Executando dentro de um pod podemos ter um ou mais conteineres. S\u00e3o criados e exclu\u00eddos conforme a necessidade, o que permite um alto gerenciamento de recursos. Os Pods s\u00e3o criados a partir de defini\u00e7\u00f5es YAML ou JSON, que especificam quais containers devem ser executados dentro do Pod, suas imagens e as portas em que cada container deve ouvir. Quando ele \u00e9 criado, recebe um endere\u00e7o IP interno dentro do cluster, permitindo que outros Pods se comuniquem com ele.","title":"O que s\u00e3o pods?"},{"location":"kubernetes/pods_and_nodes/#rotulos","text":"Os r\u00f3tulos s\u00e3o pares de chave-valor que s\u00e3o atribu\u00eddos aos objetos no Kubernetes, como Pods, Servi\u00e7os, Application Controllers, entre outros. Eles s\u00e3o usados para identificar, categorizar e selecionar objetos para opera\u00e7\u00f5es de gerenciamento, como escalonamento e exclus\u00e3o Usabilidade: Designar objetos para desenvolvimento, teste e produ\u00e7\u00e3o Adicionar tags de vers\u00e3o Classificar um objeto usando tags","title":"R\u00f3tulos"},{"location":"kubernetes/pods_and_nodes/#anotacoes","text":"As anota\u00e7\u00f5es, por outro lado, s\u00e3o pares de chave-valor opcionais que podem ser adicionadas a objetos no Kubernetes. Eles s\u00e3o usados para adicionar metadados adicionais aos objetos, como informa\u00e7\u00f5es de depura\u00e7\u00e3o, documenta\u00e7\u00e3o e pol\u00edticas de seguran\u00e7a. Quais s\u00e3o as principais diferen\u00e7as entre pods e nodes? Por que separar em dois n\u00edveis? 1. Separa\u00e7\u00e3o de Responsabilidades: Pods agrupam cont\u00eaineres que t\u00eam uma rela\u00e7\u00e3o estreita e precisam compartilhar recursos (como volumes e rede). Esses cont\u00eaineres s\u00e3o geralmente interdependentes e, por isso, precisam estar no mesmo ambiente de execu\u00e7\u00e3o. Por exemplo, um pod pode conter uma aplica\u00e7\u00e3o e um cont\u00eainer auxiliar que faz logging ou monitoramento dessa aplica\u00e7\u00e3o. N\u00f3s s\u00e3o unidades de infraestrutura (m\u00e1quinas f\u00edsicas ou virtuais) que fornecem os recursos computacionais (CPU, mem\u00f3ria, armazenamento) para executar os pods. Um n\u00f3 pode hospedar v\u00e1rios pods, cada um com diferentes fun\u00e7\u00f5es, de diferentes partes do sistema. 2. Escalabilidade e Flexibilidade: Se voc\u00ea colocar todos os cont\u00eaineres em um \u00fanico pod, voc\u00ea perde a granularidade no controle de escala. Pods s\u00e3o pensados para serem pequenos, encapsulando um ou poucos cont\u00eaineres interdependentes. Ao escalar um pod, voc\u00ea replica exatamente o que h\u00e1 dentro dele. Exemplo: Se voc\u00ea tem uma API e um banco de dados no mesmo pod, ao escalar esse pod, voc\u00ea n\u00e3o pode escalar a API separadamente do banco de dados, mesmo que a API precise de mais replicas, enquanto o banco n\u00e3o. Escalando pods separados: Ao ter pods separados (ex.: um para a API, outro para o banco de dados), voc\u00ea pode escalar a API independente do banco. Isso te d\u00e1 flexibilidade para adaptar cada parte da sua aplica\u00e7\u00e3o conforme a demanda. 3. Gerenciamento de Recursos: N\u00f3s permitem a otimiza\u00e7\u00e3o do uso de recursos. Em um cluster, Kubernetes distribui automaticamente os pods entre diferentes n\u00f3s, garantindo um balanceamento eficiente da carga. Se todos os seus pods estivessem em um \u00fanico n\u00f3, voc\u00ea estaria limitado pela capacidade de CPU, mem\u00f3ria e armazenamento desse n\u00f3 espec\u00edfico. Se esse n\u00f3 falhar, todos os pods falhariam juntos. Com m\u00faltiplos n\u00f3s, o Kubernetes pode distribuir a carga e garantir alta disponibilidade. 4. Resili\u00eancia e Isolamento: Ao separar seus cont\u00eaineres em pods menores e independentes, voc\u00ea garante melhor isolamento entre diferentes componentes da sua aplica\u00e7\u00e3o. Se um cont\u00eainer dentro de um pod falha, o Kubernetes pode reiniciar apenas esse pod, sem impactar os outros pods no n\u00f3. Se voc\u00ea colocar todos os cont\u00eaineres em um \u00fanico pod, qualquer falha em um dos cont\u00eaineres pode potencialmente afetar outros, j\u00e1 que eles compartilham o mesmo ciclo de vida. Isso tamb\u00e9m prejudicaria a capacidade de isolar falhas e limitar danos. 5. Alta Disponibilidade: Distribuir pods entre n\u00f3s \u00e9 uma pr\u00e1tica essencial para garantir a alta disponibilidade. Ao espalhar seus pods entre diferentes n\u00f3s, voc\u00ea minimiza o risco de falhas catastr\u00f3ficas. Se um n\u00f3 cair, apenas os pods nele s\u00e3o afetados, e o Kubernetes pode rapidamente realocar os pods em outros n\u00f3s dispon\u00edveis. Se voc\u00ea tiver apenas um n\u00f3 e ele falhar, todas as suas aplica\u00e7\u00f5es caem, independente de quantos pods voc\u00ea tem. 6. Otimiza\u00e7\u00e3o de Carga e Uso de Recursos: N\u00f3 \u00e9 a unidade de infraestrutura f\u00edsica/virtual que prov\u00ea CPU, mem\u00f3ria e armazenamento. Kubernetes gerencia os recursos dentro dos n\u00f3s de forma eficiente, colocando mais pods em n\u00f3s subutilizados e garantindo que a carga seja bem distribu\u00edda no cluster. Escalar n\u00f3s inteiros faz sentido quando os n\u00f3s est\u00e3o sobrecarregados ou sem recursos suficientes para hospedar mais pods. Mas voc\u00ea ainda quer o controle granular para escalar individualmente os pods que realmente precisam de mais inst\u00e2ncias, ao inv\u00e9s de escalar todos os cont\u00eaineres dentro de um n\u00f3 ou pod.","title":"Anota\u00e7\u00f5es"},{"location":"kubernetes/pods_and_nodes/#resumo","text":"Pods permitem agrupar cont\u00eaineres interdependentes que precisam ser escalados juntos e compartilhar recursos. N\u00f3s s\u00e3o unidades de infraestrutura que suportam a execu\u00e7\u00e3o de v\u00e1rios pods e permitem a distribui\u00e7\u00e3o de carga. A escalabilidade de pods separados te d\u00e1 flexibilidade para ajustar recursos e desempenho por servi\u00e7o, enquanto escalar n\u00f3s te permite aumentar a capacidade de todo o cluster. Distribuir pods em v\u00e1rios n\u00f3s melhora a resili\u00eancia e alta disponibilidade. Portanto, ter um pod por n\u00f3 ou todos os cont\u00eaineres em um \u00fanico pod eliminaria muitos dos benef\u00edcios do Kubernetes, como gerenciamento de recursos, resili\u00eancia e escalabilidade granular. Voltar para Kubernetes","title":"Resumo"},{"location":"kubernetes/probes/","text":"Probes S\u00e3o um recurso do kubernetes para verificar a sa\u00fade de um container. Probes s\u00e3o definidas no manifesto kubernetes e \u00e9 uma boa pr\u00e1tica definir os endpoints para os tr\u00eas tipos de probes. Existem 3 tipos de probes: Liveness, Readiness e Startup. Liveness Probe Probe que verifica de tmepo em tempo se o aplicativo continua funcional por meio de um coamndo. Se um conteiner falhar repetidamente nesta probe o kubelet ir\u00e1 reiniciar o conteiner. Esta probe n\u00e3o espera pela readiness probe para ser executada. Se voc\u00ea deseja esperar antes de executar o liveness probe, voc\u00ea pode tamb\u00e9m definir initialDelaySeconds ou usar o startup probe. Liveness Meios de Verifica\u00e7\u00e3o Pode ser definido por meio de: - Requisi\u00e7\u00e3o http: determina se est\u00e1 em execu\u00e7\u00e3o realizando uma chamada http que deve retornar o status code 200 em caso positivo. livenessProbe: httpGet: path: /healthz port: 8080 httpHeaders: - name: Custom-Header value: Awesome initialDelaySeconds: 3 periodSeconds: 3 TCP: escuta uma porta para verificar se a aplica\u00e7\u00e3o est\u00e1 em execu\u00e7\u00e3o. livenessProbe: tcpSocket: port: 8080 initialDelaySeconds: 15 periodSeconds: 10 Exec: executa um comando no conteiner para verificar se est\u00e1 em execu\u00e7\u00e3o. livenessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5 gRPC: se a aplica\u00e7\u00e3o implementa Health Check Protocol livenessProbe: grpc: port: 2379 initialDelaySeconds: 10 Readiness Probe Determina se um container j\u00e1 est\u00e1 pronto para receber tr\u00e1fego. \u00c9 \u00fatil quando \u00e9 necess\u00e1rio esperar que a aplica\u00e7\u00e3o termine suas tarefas iniciais como carregamento de arquivos, estabelecer conex\u00f5es de rede e etc. Se esta probe retornar um c\u00f3digo de falha, o kubernetes remove o pod de todos os services correspondentes, evitando rotear para este pod tr\u00e1fego que resultar\u00e1 em falha. Esta probe \u00e9 executada durante todo o tempo de vida do conteiner. Readiness Meios de Verifica\u00e7\u00e3o S\u00e3o definidos de forma similar ao livenessProbe, voc\u00ea apenas utiliza readinessProbe no lugar de livenessProbe. Exemplo: readinessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5 Startup Probe Verifica se a aplica\u00e7\u00e3o dentro de um conteiner foi inicializada. Este probe pode ser adotado para evitar que em conteineres de inicializa\u00e7\u00e3o lenta sejam removidos pelo kubelet atrav\u00e9s do liveness probe antes dele finalizar sua inicializa\u00e7\u00e3o. Se esta probe estiver configurada desativa outras probes (liveness e readiness) tempor\u00e1riamente at\u00e9 que esta seja conclu\u00edda. Este tipo de probe \u00e9 executada apenas no startup do conteiner, ao contr\u00e1rio das outras que s\u00e3o executadas periodicamente. Startup Meio de Verifica\u00e7\u00e3o ports: - name: liveness-port containerPort: 8080 livenessProbe: httpGet: path: /healthz port: liveness-port failureThreshold: 1 periodSeconds: 10 startupProbe: httpGet: path: /healthz port: liveness-port failureThreshold: 30 periodSeconds: 10 Exemplo Final apiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-http spec: containers: - name: liveness image: registry.k8s.io/e2e-test-images/agnhost:2.40 args: - liveness livenessProbe: httpGet: path: /healthz port: 8080 httpHeaders: - name: Custom-Header value: Awesome initialDelaySeconds: 3 periodSeconds: 3 Voltar para Kubernetes","title":"Probes"},{"location":"kubernetes/probes/#probes","text":"S\u00e3o um recurso do kubernetes para verificar a sa\u00fade de um container. Probes s\u00e3o definidas no manifesto kubernetes e \u00e9 uma boa pr\u00e1tica definir os endpoints para os tr\u00eas tipos de probes. Existem 3 tipos de probes: Liveness, Readiness e Startup.","title":"Probes"},{"location":"kubernetes/probes/#liveness-probe","text":"Probe que verifica de tmepo em tempo se o aplicativo continua funcional por meio de um coamndo. Se um conteiner falhar repetidamente nesta probe o kubelet ir\u00e1 reiniciar o conteiner. Esta probe n\u00e3o espera pela readiness probe para ser executada. Se voc\u00ea deseja esperar antes de executar o liveness probe, voc\u00ea pode tamb\u00e9m definir initialDelaySeconds ou usar o startup probe.","title":"Liveness Probe"},{"location":"kubernetes/probes/#liveness-meios-de-verificacao","text":"Pode ser definido por meio de: - Requisi\u00e7\u00e3o http: determina se est\u00e1 em execu\u00e7\u00e3o realizando uma chamada http que deve retornar o status code 200 em caso positivo. livenessProbe: httpGet: path: /healthz port: 8080 httpHeaders: - name: Custom-Header value: Awesome initialDelaySeconds: 3 periodSeconds: 3 TCP: escuta uma porta para verificar se a aplica\u00e7\u00e3o est\u00e1 em execu\u00e7\u00e3o. livenessProbe: tcpSocket: port: 8080 initialDelaySeconds: 15 periodSeconds: 10 Exec: executa um comando no conteiner para verificar se est\u00e1 em execu\u00e7\u00e3o. livenessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5 gRPC: se a aplica\u00e7\u00e3o implementa Health Check Protocol livenessProbe: grpc: port: 2379 initialDelaySeconds: 10","title":"Liveness Meios de Verifica\u00e7\u00e3o"},{"location":"kubernetes/probes/#readiness-probe","text":"Determina se um container j\u00e1 est\u00e1 pronto para receber tr\u00e1fego. \u00c9 \u00fatil quando \u00e9 necess\u00e1rio esperar que a aplica\u00e7\u00e3o termine suas tarefas iniciais como carregamento de arquivos, estabelecer conex\u00f5es de rede e etc. Se esta probe retornar um c\u00f3digo de falha, o kubernetes remove o pod de todos os services correspondentes, evitando rotear para este pod tr\u00e1fego que resultar\u00e1 em falha. Esta probe \u00e9 executada durante todo o tempo de vida do conteiner.","title":"Readiness Probe"},{"location":"kubernetes/probes/#readiness-meios-de-verificacao","text":"S\u00e3o definidos de forma similar ao livenessProbe, voc\u00ea apenas utiliza readinessProbe no lugar de livenessProbe. Exemplo: readinessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5","title":"Readiness Meios de Verifica\u00e7\u00e3o"},{"location":"kubernetes/probes/#startup-probe","text":"Verifica se a aplica\u00e7\u00e3o dentro de um conteiner foi inicializada. Este probe pode ser adotado para evitar que em conteineres de inicializa\u00e7\u00e3o lenta sejam removidos pelo kubelet atrav\u00e9s do liveness probe antes dele finalizar sua inicializa\u00e7\u00e3o. Se esta probe estiver configurada desativa outras probes (liveness e readiness) tempor\u00e1riamente at\u00e9 que esta seja conclu\u00edda. Este tipo de probe \u00e9 executada apenas no startup do conteiner, ao contr\u00e1rio das outras que s\u00e3o executadas periodicamente.","title":"Startup Probe"},{"location":"kubernetes/probes/#startup-meio-de-verificacao","text":"ports: - name: liveness-port containerPort: 8080 livenessProbe: httpGet: path: /healthz port: liveness-port failureThreshold: 1 periodSeconds: 10 startupProbe: httpGet: path: /healthz port: liveness-port failureThreshold: 30 periodSeconds: 10","title":"Startup Meio de Verifica\u00e7\u00e3o"},{"location":"kubernetes/probes/#exemplo-final","text":"apiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-http spec: containers: - name: liveness image: registry.k8s.io/e2e-test-images/agnhost:2.40 args: - liveness livenessProbe: httpGet: path: /healthz port: 8080 httpHeaders: - name: Custom-Header value: Awesome initialDelaySeconds: 3 periodSeconds: 3 Voltar para Kubernetes","title":"Exemplo Final"},{"location":"kubernetes/replicaSet_and_deployment/","text":"ReplicaSets e Deployments ReplicaSets O prop\u00f3sito de um ReplicaSet \u00e9 gerenciar um conjunto de r\u00e9plicas de Pods em execu\u00e7\u00e3o a qualquer momento. Por isso, \u00e9 geralmente utilizado para garantir a disponibilidade de um certo n\u00famero de Pods id\u00eanticos. Um ReplicaSet \u00e9 definido por campos, incluindo um seletor que identifica quais Pods podem ser adquiridos, um n\u00famero de r\u00e9plicas indicando quantos Pods devem ser mantidos, e um pod template especificando as defini\u00e7\u00f5es para novos Pods que devem ser criados para atender ao n\u00famero de r\u00e9plicas estipuladas. Um ReplicaSet cumpre seu prop\u00f3sito criando e deletando Pods conforme for preciso para atingir o n\u00famero desejado. Quando um ReplicaSet precisa criar novos Pods, ele usa o seu podTemplate. Quando usar um ReplicaSet Um ReplicaSet garante que um n\u00famero de r\u00e9plicas de um Pod est\u00e3o executando em qualquer momento. Entretanto, um Deployment \u00e9 um conceito de n\u00edvel superior que gerencia ReplicaSets e fornece atualiza\u00e7\u00f5es declarativas aos Pods assim como v\u00e1rias outras fun\u00e7\u00f5es \u00fateis. Portanto, n\u00f3s recomendamos a utiliza\u00e7\u00e3o de Deployments ao inv\u00e9s do uso direto de ReplicaSets, exceto se for preciso uma orquestra\u00e7\u00e3o de atualiza\u00e7\u00e3o customizada ou que nenhuma atualiza\u00e7\u00e3o seja necess\u00e1ria. Isso na realidade significa que voc\u00ea pode nunca precisar manipular objetos ReplicaSet: prefira usar um Deployment, e defina sua aplica\u00e7\u00e3o na se\u00e7\u00e3o spec. Exemplo apiVersion: apps/v1 kind: ReplicaSet metadata: name: frontend labels: app: guestbook tier: frontend spec: # modifique o n\u00famero de replicas de acordo com o seu caso replicas: 3 selector: matchLabels: tier: frontend template: metadata: labels: tier: frontend spec: containers: - name: php-redis image: gcr.io/google_samples/gb-frontend:v3 Deployment (recomendado) Deployment \u00e9 um objeto o qual pode possuir ReplicaSets, atualiz\u00e1-los e por consequ\u00eancia seus Pods via atualiza\u00e7\u00f5es declarativas, gradativas do lado do servidor. Enquanto ReplicaSets conseguem ser usados independentemente, hoje eles s\u00e3o principalmente usados por Deployments como um mecanismo para orquestrar a cria\u00e7\u00e3o, dele\u00e7\u00e3o e atualiza\u00e7\u00e3o de um Pod. Quando voc\u00ea usa Deployments voc\u00ea n\u00e3o precisa se preocupar com o gerenciamento de ReplicaSets que s\u00e3o criados por ele. Deployments controlam e gerenciam seus ReplicaSets. Por isso, \u00e9 recomendado o uso de Deployments quando voc\u00ea deseja ReplicaSets. Al\u00e9m disso, o Deployment permite que os usu\u00e1rios atualizem o aplicativo de forma controlada e autom\u00e1tica. Quando uma atualiza\u00e7\u00e3o \u00e9 implantada, o Kubernetes cria um novo conjunto de r\u00e9plicas com a nova vers\u00e3o do aplicativo e, em seguida, gradualmente substitui as r\u00e9plicas antigas pelas novas. Esse processo \u00e9 chamado de \u201cRolling Update\u201d,e permite que os usu\u00e1rios atualizem o aplicativo sem interromper o servi\u00e7o. Se ocorrer algum problema durante uma atualiza\u00e7\u00e3o, o Kubernetes oferece a possibilidade de reverter para a vers\u00e3o anterior do aplicativo. Isso \u00e9 chamado de rollback e \u00e9 uma funcionalidade importante para garantir a disponibilidade cont\u00ednua do servi\u00e7o. Exemplo apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 Job Use um Job no lugar de um ReplicaSet para Pods que tem por objetivo sua termina\u00e7\u00e3o no final da execu\u00e7\u00e3o (como batch jobs). DaemonSet Use um DaemonSet no lugar de um ReplicaSet para Pods que precisam prover fun\u00e7\u00f5es no n\u00edvel de sistema, como monitoramento do sistema ou logs do sistema. Esses Pods tem um tempo de vida ligado \u00e0 vida \u00fatil do sistema: os Pods precisam estar executando na m\u00e1quina antes de outros Pods inicializarem, e s\u00e3o seguros de terminarem quando a m\u00e1quina esta preparada para reiniciar/desligar. Voltar para Kubernetes","title":"ReplicaSets e Deployments"},{"location":"kubernetes/replicaSet_and_deployment/#replicasets-e-deployments","text":"","title":"ReplicaSets e Deployments"},{"location":"kubernetes/replicaSet_and_deployment/#replicasets","text":"O prop\u00f3sito de um ReplicaSet \u00e9 gerenciar um conjunto de r\u00e9plicas de Pods em execu\u00e7\u00e3o a qualquer momento. Por isso, \u00e9 geralmente utilizado para garantir a disponibilidade de um certo n\u00famero de Pods id\u00eanticos. Um ReplicaSet \u00e9 definido por campos, incluindo um seletor que identifica quais Pods podem ser adquiridos, um n\u00famero de r\u00e9plicas indicando quantos Pods devem ser mantidos, e um pod template especificando as defini\u00e7\u00f5es para novos Pods que devem ser criados para atender ao n\u00famero de r\u00e9plicas estipuladas. Um ReplicaSet cumpre seu prop\u00f3sito criando e deletando Pods conforme for preciso para atingir o n\u00famero desejado. Quando um ReplicaSet precisa criar novos Pods, ele usa o seu podTemplate.","title":"ReplicaSets"},{"location":"kubernetes/replicaSet_and_deployment/#quando-usar-um-replicaset","text":"Um ReplicaSet garante que um n\u00famero de r\u00e9plicas de um Pod est\u00e3o executando em qualquer momento. Entretanto, um Deployment \u00e9 um conceito de n\u00edvel superior que gerencia ReplicaSets e fornece atualiza\u00e7\u00f5es declarativas aos Pods assim como v\u00e1rias outras fun\u00e7\u00f5es \u00fateis. Portanto, n\u00f3s recomendamos a utiliza\u00e7\u00e3o de Deployments ao inv\u00e9s do uso direto de ReplicaSets, exceto se for preciso uma orquestra\u00e7\u00e3o de atualiza\u00e7\u00e3o customizada ou que nenhuma atualiza\u00e7\u00e3o seja necess\u00e1ria. Isso na realidade significa que voc\u00ea pode nunca precisar manipular objetos ReplicaSet: prefira usar um Deployment, e defina sua aplica\u00e7\u00e3o na se\u00e7\u00e3o spec.","title":"Quando usar um ReplicaSet"},{"location":"kubernetes/replicaSet_and_deployment/#exemplo","text":"apiVersion: apps/v1 kind: ReplicaSet metadata: name: frontend labels: app: guestbook tier: frontend spec: # modifique o n\u00famero de replicas de acordo com o seu caso replicas: 3 selector: matchLabels: tier: frontend template: metadata: labels: tier: frontend spec: containers: - name: php-redis image: gcr.io/google_samples/gb-frontend:v3","title":"Exemplo"},{"location":"kubernetes/replicaSet_and_deployment/#deployment-recomendado","text":"Deployment \u00e9 um objeto o qual pode possuir ReplicaSets, atualiz\u00e1-los e por consequ\u00eancia seus Pods via atualiza\u00e7\u00f5es declarativas, gradativas do lado do servidor. Enquanto ReplicaSets conseguem ser usados independentemente, hoje eles s\u00e3o principalmente usados por Deployments como um mecanismo para orquestrar a cria\u00e7\u00e3o, dele\u00e7\u00e3o e atualiza\u00e7\u00e3o de um Pod. Quando voc\u00ea usa Deployments voc\u00ea n\u00e3o precisa se preocupar com o gerenciamento de ReplicaSets que s\u00e3o criados por ele. Deployments controlam e gerenciam seus ReplicaSets. Por isso, \u00e9 recomendado o uso de Deployments quando voc\u00ea deseja ReplicaSets. Al\u00e9m disso, o Deployment permite que os usu\u00e1rios atualizem o aplicativo de forma controlada e autom\u00e1tica. Quando uma atualiza\u00e7\u00e3o \u00e9 implantada, o Kubernetes cria um novo conjunto de r\u00e9plicas com a nova vers\u00e3o do aplicativo e, em seguida, gradualmente substitui as r\u00e9plicas antigas pelas novas. Esse processo \u00e9 chamado de \u201cRolling Update\u201d,e permite que os usu\u00e1rios atualizem o aplicativo sem interromper o servi\u00e7o. Se ocorrer algum problema durante uma atualiza\u00e7\u00e3o, o Kubernetes oferece a possibilidade de reverter para a vers\u00e3o anterior do aplicativo. Isso \u00e9 chamado de rollback e \u00e9 uma funcionalidade importante para garantir a disponibilidade cont\u00ednua do servi\u00e7o.","title":"Deployment (recomendado)"},{"location":"kubernetes/replicaSet_and_deployment/#exemplo_1","text":"apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80","title":"Exemplo"},{"location":"kubernetes/replicaSet_and_deployment/#job","text":"Use um Job no lugar de um ReplicaSet para Pods que tem por objetivo sua termina\u00e7\u00e3o no final da execu\u00e7\u00e3o (como batch jobs).","title":"Job"},{"location":"kubernetes/replicaSet_and_deployment/#daemonset","text":"Use um DaemonSet no lugar de um ReplicaSet para Pods que precisam prover fun\u00e7\u00f5es no n\u00edvel de sistema, como monitoramento do sistema ou logs do sistema. Esses Pods tem um tempo de vida ligado \u00e0 vida \u00fatil do sistema: os Pods precisam estar executando na m\u00e1quina antes de outros Pods inicializarem, e s\u00e3o seguros de terminarem quando a m\u00e1quina esta preparada para reiniciar/desligar. Voltar para Kubernetes","title":"DaemonSet"},{"location":"kubernetes/services/","text":"Services Um objeto Service do Kubernetes \u00e9 uma camada de abstra\u00e7\u00e3o que define um conjunto l\u00f3gico de Pods e habilita a exposi\u00e7\u00e3o ao tr\u00e1fego externo, balanceamento de carga e descoberta de servi\u00e7o para esses Pods. Embora cada Pod tenha um endere\u00e7o IP \u00fanico, estes IPs n\u00e3o s\u00e3o expostos externamente ao cluster sem um objeto Service. Objetos Service permitem que suas aplica\u00e7\u00f5es recebam tr\u00e1fego. Services podem ser expostos de formas diferentes especificando um tipo (campo type) na especifica\u00e7\u00e3o do servi\u00e7o (campo spec): ClusterIP (padr\u00e3o) - Exp\u00f5e o servi\u00e7o sob um endere\u00e7o IP interno no cluster. Este tipo de servi\u00e7o \u00e9 acess\u00edvel somente dentro do cluster. NodePort - Exp\u00f5e o servi\u00e7o sob a mesma porta em cada n\u00f3 selecionado no cluster usando NAT. Torna o servi\u00e7o acess\u00edvel externamente ao cluster usando o endere\u00e7o : . \u00c9 um superconjunto do tipo ClusterIP. LoadBalancer - Cria um balanceador de carga externo no provedor de nuvem atual (se suportado) e atribui um endere\u00e7o IP fixo e externo para o servi\u00e7o. \u00c9 um superconjunto do tipo NodePort. ExternalName - Mapeia o Service para o conte\u00fado do campo externalName (por exemplo, foo.bar.example.com), retornando um registro DNS do tipo CNAME com o seu valor. Nenhum tipo de proxy \u00e9 configurado. Este tipo requer a vers\u00e3o 1.7 ou mais recente do kube-dns, ou o CoreDNS vers\u00e3o 0.0.8 ou superior. Voltar para Kubernetes","title":"Services"},{"location":"kubernetes/services/#services","text":"Um objeto Service do Kubernetes \u00e9 uma camada de abstra\u00e7\u00e3o que define um conjunto l\u00f3gico de Pods e habilita a exposi\u00e7\u00e3o ao tr\u00e1fego externo, balanceamento de carga e descoberta de servi\u00e7o para esses Pods. Embora cada Pod tenha um endere\u00e7o IP \u00fanico, estes IPs n\u00e3o s\u00e3o expostos externamente ao cluster sem um objeto Service. Objetos Service permitem que suas aplica\u00e7\u00f5es recebam tr\u00e1fego. Services podem ser expostos de formas diferentes especificando um tipo (campo type) na especifica\u00e7\u00e3o do servi\u00e7o (campo spec): ClusterIP (padr\u00e3o) - Exp\u00f5e o servi\u00e7o sob um endere\u00e7o IP interno no cluster. Este tipo de servi\u00e7o \u00e9 acess\u00edvel somente dentro do cluster. NodePort - Exp\u00f5e o servi\u00e7o sob a mesma porta em cada n\u00f3 selecionado no cluster usando NAT. Torna o servi\u00e7o acess\u00edvel externamente ao cluster usando o endere\u00e7o : . \u00c9 um superconjunto do tipo ClusterIP. LoadBalancer - Cria um balanceador de carga externo no provedor de nuvem atual (se suportado) e atribui um endere\u00e7o IP fixo e externo para o servi\u00e7o. \u00c9 um superconjunto do tipo NodePort. ExternalName - Mapeia o Service para o conte\u00fado do campo externalName (por exemplo, foo.bar.example.com), retornando um registro DNS do tipo CNAME com o seu valor. Nenhum tipo de proxy \u00e9 configurado. Este tipo requer a vers\u00e3o 1.7 ou mais recente do kube-dns, ou o CoreDNS vers\u00e3o 0.0.8 ou superior. Voltar para Kubernetes","title":"Services"},{"location":"kubernetes/storage/","text":"Armazenamento Os arquivos em disco em um cont\u00eainer s\u00e3o ef\u00eameros, o que apresenta alguns problemas para aplica\u00e7\u00f5es n\u00e3o triviais quando executadas em cont\u00eaineres. Um problema \u00e9 a perda de arquivos quando um cont\u00eainer quebra. O kubelet reinicia o cont\u00eainer, mas em um estado limpo. Um segundo problema ocorre ao compartilhar arquivos entre cont\u00eaineres que s\u00e3o executados juntos em um Pod. A abstra\u00e7\u00e3o de volume do Kubernetes resolve ambos os problemas. Volumes O Kubernetes suporta muitos tipos de volumes. Um Pod \u00e9 capaz de utilizar qualquer quantidade de tipos de volumes simultaneamente. Os tipos de volume ef\u00eameros t\u00eam a mesma vida \u00fatil do pod, mas os volumes persistentes existem al\u00e9m da vida \u00fatil de um pod. Quando um pod deixa de existir, o Kubernetes destr\u00f3i volumes ef\u00eameros; no entanto, o Kubernetes n\u00e3o destr\u00f3i volumes persistentes. Para qualquer tipo de volume em um determinado pod, os dados s\u00e3o preservados entre as reinicializa\u00e7\u00f5es do cont\u00eainer. Em sua ess\u00eancia, um volume \u00e9 um diret\u00f3rio, eventualmente com alguns dados dentro dele, que \u00e9 acess\u00edvel aos cont\u00eaineres de um Pod. Como esse diret\u00f3rio vem a ser, o meio que o suporta e o conte\u00fado do mesmo s\u00e3o determinados pelo tipo particular de volume utilizado. Para utilizar um volume, especifique os volumes que ser\u00e3o disponibilizados para o Pod em .spec.volumes e declare onde montar esses volumes dentro dos cont\u00eaineres em .spec.containers[*].volumeMounts. Volumes n\u00e3o podem ser montados dentro de outros volumes (mas voc\u00ea pode consultar Utilizando subPath para um mecanismo relacionado). Al\u00e9m disso, um volume n\u00e3o pode conter um link f\u00edsico para qualquer outro dado em um volume diferente. O Kubernetessuporta v\u00e1rios tipos de volumes, cada um com suas pr\u00f3prias propriedades e funcionalidades. Alguns dos tipos mais comuns de volumes s\u00e3o: emptyDir: um volume vazio que \u00e9 criado quando um Pod \u00e9 iniciado e \u00e9 exclu\u00eddo quando o Pod \u00e9 encerrado. Ele \u00e9 geralmente usado para compartilhar arquivos tempor\u00e1rios entre containers em um Pod. hostPath: um volume que monta um diret\u00f3rio ou arquivo do n\u00f3 do cluster no container. \u00c9 \u00fatil quando os containers precisam acessar arquivos ou diret\u00f3rios no n\u00f3 do cluster. persistentVolumeClaim: um volume que fornece armazenamento persistente para os containers em um Pod. \u00c9 usado quando os dados precisam sobreviver \u00e0reinicializa\u00e7\u00f5es ou redimensionamentos de Pods. Tipos de Persistent Volumes O Kubernetes suporta v\u00e1rios tipos de persistent volumes.Temos uma lista dos tipos mais comuns: - NFS: um protocolo de compartilhamento de arquivos em rede que permite que v\u00e1rios n\u00f3s acessem o mesmo armazenamento. - iSCSI: um protocolo de armazenamento em rede que permite que um sistema de armazenamento remoto seja montado em um n\u00f3 do cluster.\u25cfhostPath: um volume que monta um diret\u00f3rio ou arquivo do n\u00f3 do cluster no container. \u00c9 \u00fatil quando os containers precisam acessar arquivos ou diret\u00f3rios no n\u00f3 do cluster. - EBS (Elastic Block Store): um servi\u00e7o de armazenamento em nuvem oferecido pela AWS que permite criar volumes de armazenamento persistente. Exemplo apiVersion: v1 kind: Pod metadata: name: test-ebs spec: capacity: storage: 5Gi accessModes: - ReadWriteOnce containers: - image: registry.k8s.io/test-webserver name: test-container volumeMounts: - mountPath: /test-ebs name: test-volume volumes: - name: test-volume nfs: server: 192.168.1.100 path: \"/dados\" Voltar para Kubernetes","title":"Armazenamento"},{"location":"kubernetes/storage/#armazenamento","text":"Os arquivos em disco em um cont\u00eainer s\u00e3o ef\u00eameros, o que apresenta alguns problemas para aplica\u00e7\u00f5es n\u00e3o triviais quando executadas em cont\u00eaineres. Um problema \u00e9 a perda de arquivos quando um cont\u00eainer quebra. O kubelet reinicia o cont\u00eainer, mas em um estado limpo. Um segundo problema ocorre ao compartilhar arquivos entre cont\u00eaineres que s\u00e3o executados juntos em um Pod. A abstra\u00e7\u00e3o de volume do Kubernetes resolve ambos os problemas.","title":"Armazenamento"},{"location":"kubernetes/storage/#volumes","text":"O Kubernetes suporta muitos tipos de volumes. Um Pod \u00e9 capaz de utilizar qualquer quantidade de tipos de volumes simultaneamente. Os tipos de volume ef\u00eameros t\u00eam a mesma vida \u00fatil do pod, mas os volumes persistentes existem al\u00e9m da vida \u00fatil de um pod. Quando um pod deixa de existir, o Kubernetes destr\u00f3i volumes ef\u00eameros; no entanto, o Kubernetes n\u00e3o destr\u00f3i volumes persistentes. Para qualquer tipo de volume em um determinado pod, os dados s\u00e3o preservados entre as reinicializa\u00e7\u00f5es do cont\u00eainer. Em sua ess\u00eancia, um volume \u00e9 um diret\u00f3rio, eventualmente com alguns dados dentro dele, que \u00e9 acess\u00edvel aos cont\u00eaineres de um Pod. Como esse diret\u00f3rio vem a ser, o meio que o suporta e o conte\u00fado do mesmo s\u00e3o determinados pelo tipo particular de volume utilizado. Para utilizar um volume, especifique os volumes que ser\u00e3o disponibilizados para o Pod em .spec.volumes e declare onde montar esses volumes dentro dos cont\u00eaineres em .spec.containers[*].volumeMounts. Volumes n\u00e3o podem ser montados dentro de outros volumes (mas voc\u00ea pode consultar Utilizando subPath para um mecanismo relacionado). Al\u00e9m disso, um volume n\u00e3o pode conter um link f\u00edsico para qualquer outro dado em um volume diferente. O Kubernetessuporta v\u00e1rios tipos de volumes, cada um com suas pr\u00f3prias propriedades e funcionalidades. Alguns dos tipos mais comuns de volumes s\u00e3o: emptyDir: um volume vazio que \u00e9 criado quando um Pod \u00e9 iniciado e \u00e9 exclu\u00eddo quando o Pod \u00e9 encerrado. Ele \u00e9 geralmente usado para compartilhar arquivos tempor\u00e1rios entre containers em um Pod. hostPath: um volume que monta um diret\u00f3rio ou arquivo do n\u00f3 do cluster no container. \u00c9 \u00fatil quando os containers precisam acessar arquivos ou diret\u00f3rios no n\u00f3 do cluster. persistentVolumeClaim: um volume que fornece armazenamento persistente para os containers em um Pod. \u00c9 usado quando os dados precisam sobreviver \u00e0reinicializa\u00e7\u00f5es ou redimensionamentos de Pods.","title":"Volumes"},{"location":"kubernetes/storage/#tipos-de-persistent-volumes","text":"O Kubernetes suporta v\u00e1rios tipos de persistent volumes.Temos uma lista dos tipos mais comuns: - NFS: um protocolo de compartilhamento de arquivos em rede que permite que v\u00e1rios n\u00f3s acessem o mesmo armazenamento. - iSCSI: um protocolo de armazenamento em rede que permite que um sistema de armazenamento remoto seja montado em um n\u00f3 do cluster.\u25cfhostPath: um volume que monta um diret\u00f3rio ou arquivo do n\u00f3 do cluster no container. \u00c9 \u00fatil quando os containers precisam acessar arquivos ou diret\u00f3rios no n\u00f3 do cluster. - EBS (Elastic Block Store): um servi\u00e7o de armazenamento em nuvem oferecido pela AWS que permite criar volumes de armazenamento persistente.","title":"Tipos de Persistent Volumes"},{"location":"kubernetes/storage/#exemplo","text":"apiVersion: v1 kind: Pod metadata: name: test-ebs spec: capacity: storage: 5Gi accessModes: - ReadWriteOnce containers: - image: registry.k8s.io/test-webserver name: test-container volumeMounts: - mountPath: /test-ebs name: test-volume volumes: - name: test-volume nfs: server: 192.168.1.100 path: \"/dados\" Voltar para Kubernetes","title":"Exemplo"},{"location":"software-architecture/","text":"Arquitetura de Software Aula 1 - Introdu\u00e7\u00e3o Aula 2 - Processo e Modulariza\u00e7\u00e3o Aula 3 - Documenta\u00e7\u00e3o, Testabilidade e Modificabilidade Aula 4 - Escalabilidade, Disponibilidade e Desempenho","title":"Arquitetura de Software"},{"location":"software-architecture/#arquitetura-de-software","text":"","title":"Arquitetura de Software"},{"location":"software-architecture/#aula-1-introducao","text":"","title":"Aula 1 - Introdu\u00e7\u00e3o"},{"location":"software-architecture/#aula-2-processo-e-modularizacao","text":"","title":"Aula 2 - Processo e Modulariza\u00e7\u00e3o"},{"location":"software-architecture/#aula-3-documentacao-testabilidade-e-modificabilidade","text":"","title":"Aula 3 - Documenta\u00e7\u00e3o, Testabilidade e Modificabilidade"},{"location":"software-architecture/#aula-4-escalabilidade-disponibilidade-e-desempenho","text":"","title":"Aula 4 - Escalabilidade, Disponibilidade e Desempenho"},{"location":"software-architecture/documentation_testability_and_modifiability/","text":"Documenta\u00e7\u00e3o, Testabilidade e Modificabilidade Documenta\u00e7\u00e3o A documenta\u00e7\u00e3o de como utilizar o sistema diminui a quantidade de d\u00favidas do usu\u00e1rio. Deve ser feita da forma que melhor se aplicar ao sistema, por exemplo: texto, imagens, slides ou videos. T\u00e3o importante quanto a documenta\u00e7\u00e3o para o usu\u00e1rio final, \u00e9 a documenta\u00e7\u00e3o do desenvolvimento e arquitetura. Ela fornece ao desenvolvedor o caminho e conceitos que foram considerados para as tomadas de decis\u00f5es arquiteturais. Esta documenta\u00e7\u00e3o \u00e9 feita em conjunto pelo time e envolve decis\u00f5es at\u00e9 o mais baixo n\u00edvel. Neste momento procuramos responder as seguintes perguntas: - Qual o problema a ser resolvido - Qual \u00e9 a solu\u00e7\u00e3o proposta - Qual \u00e9 o modelo de neg\u00f3cio Avan\u00e7amos ent\u00e3o para a documenta\u00e7\u00e3o de infraestrutura, onde iremos decidir onde o projeto ser\u00e1 implantado e etc. Swagger e Redoc S\u00e3o documenta\u00e7\u00f5es a n\u00edvel de web API. O documento gerado \u00e9 baseado na especifica\u00e7\u00e3o OpenApi 3.0 ( especifica\u00e7\u00e3o no github ). O Redoc \u00e9 uma outra ferramenta de especifica\u00e7\u00e3o que gera uma p\u00e1gina baseada na especifica\u00e7\u00e3o gerada pelo swagger. Test Driven Development O TDD visa escrever o c\u00f3digo da aplica\u00e7\u00e3o partindo dos testes. Babysteps: dar sempre pequenos passos em dire\u00e7\u00e3o \u00e0 solu\u00e7\u00e3o, garante que os testes quebrem nos momentos corretos para que voc\u00ea possa validar seu funcionamento (evitar falsos positivos) e ir incrementando a solu\u00e7\u00e3o conforme necess\u00e1rio. Escrever os testes que ir\u00e3o falhar Fa\u00e7a o c\u00f3digo funcionar Elimine as redund\u00e2ncias Modificabilidade \u00c9 o pilar do software que garante que ele pode ser modificado com o m\u00ednimo de esfor\u00e7o e continue funcionando corretamente. Testes s\u00e3o essenciais para garantir a modificabilidade.","title":"Documenta\u00e7\u00e3o, Testabilidade e Modificabilidade"},{"location":"software-architecture/documentation_testability_and_modifiability/#documentacao-testabilidade-e-modificabilidade","text":"","title":"Documenta\u00e7\u00e3o, Testabilidade e Modificabilidade"},{"location":"software-architecture/documentation_testability_and_modifiability/#documentacao","text":"A documenta\u00e7\u00e3o de como utilizar o sistema diminui a quantidade de d\u00favidas do usu\u00e1rio. Deve ser feita da forma que melhor se aplicar ao sistema, por exemplo: texto, imagens, slides ou videos. T\u00e3o importante quanto a documenta\u00e7\u00e3o para o usu\u00e1rio final, \u00e9 a documenta\u00e7\u00e3o do desenvolvimento e arquitetura. Ela fornece ao desenvolvedor o caminho e conceitos que foram considerados para as tomadas de decis\u00f5es arquiteturais. Esta documenta\u00e7\u00e3o \u00e9 feita em conjunto pelo time e envolve decis\u00f5es at\u00e9 o mais baixo n\u00edvel. Neste momento procuramos responder as seguintes perguntas: - Qual o problema a ser resolvido - Qual \u00e9 a solu\u00e7\u00e3o proposta - Qual \u00e9 o modelo de neg\u00f3cio Avan\u00e7amos ent\u00e3o para a documenta\u00e7\u00e3o de infraestrutura, onde iremos decidir onde o projeto ser\u00e1 implantado e etc.","title":"Documenta\u00e7\u00e3o"},{"location":"software-architecture/documentation_testability_and_modifiability/#swagger-e-redoc","text":"S\u00e3o documenta\u00e7\u00f5es a n\u00edvel de web API. O documento gerado \u00e9 baseado na especifica\u00e7\u00e3o OpenApi 3.0 ( especifica\u00e7\u00e3o no github ). O Redoc \u00e9 uma outra ferramenta de especifica\u00e7\u00e3o que gera uma p\u00e1gina baseada na especifica\u00e7\u00e3o gerada pelo swagger.","title":"Swagger e Redoc"},{"location":"software-architecture/documentation_testability_and_modifiability/#test-driven-development","text":"O TDD visa escrever o c\u00f3digo da aplica\u00e7\u00e3o partindo dos testes. Babysteps: dar sempre pequenos passos em dire\u00e7\u00e3o \u00e0 solu\u00e7\u00e3o, garante que os testes quebrem nos momentos corretos para que voc\u00ea possa validar seu funcionamento (evitar falsos positivos) e ir incrementando a solu\u00e7\u00e3o conforme necess\u00e1rio. Escrever os testes que ir\u00e3o falhar Fa\u00e7a o c\u00f3digo funcionar Elimine as redund\u00e2ncias","title":"Test Driven Development"},{"location":"software-architecture/documentation_testability_and_modifiability/#modificabilidade","text":"\u00c9 o pilar do software que garante que ele pode ser modificado com o m\u00ednimo de esfor\u00e7o e continue funcionando corretamente. Testes s\u00e3o essenciais para garantir a modificabilidade.","title":"Modificabilidade"},{"location":"software-architecture/hexagon_architecture/","text":"Arquitetura Hexagonal Separa\u00e7\u00e3o de Conceitos (separation of concerns): modularizar de forma que resolva um \u00fanico problema Modularizar em tr\u00eas \u00e1reas distintas e isoladas: Centro do hexagono Lado superior esquerdo do hexagono Lado inferior direito do hexagono Reusabilidade de c\u00f3digo alta coes\u00e3o baixo acoplamento independ\u00eancia de tecnologia Centro do Hexagono Temos o motivo do nosso software existir, chamamos de core. Fora do Hexagono Temos os adaptadores, que permitem que as tecnologias que est\u00e3o fora do centro cheguem no centro sem contamin\u00e1-lo. Portas e Adaptadores Cada lado do hexagono representa o mesmo que uma porta e os objetos entre a porta e o centro s\u00e3o adaptadores. Porta: Conceito l\u00f3gico que define um ponto de entrada e sa\u00edda de uma aplica\u00e7\u00e3o. De acordo com o prof Marco Tulio Valente, no livro Engenharia de Software Moderna, existem 2 tipos de portas: Entrada: interfaces para comunica\u00e7\u00e3o de fora para dentro. Quando uma classe externa precisa chamar uma classe interna Sa\u00edda: interfaces para comunica\u00e7\u00e3o de dentro para fora. Quando uma classe do core precisa chamar um m\u00e9todo de uma classe externa. Estas portas declaram os servi\u00e7os requeridos pelo sistema - servi\u00e7os do mundo externo, que s\u00e3o necess\u00e1rios para o funcionamento do interno. Ex: comunica\u00e7\u00e3o com um banco de dados. Estas portas independem de tecnologia, por isto est\u00e3o do lado interno (mas n\u00e3o no centro). J\u00e1 os servi\u00e7os externos est\u00e3o ligados a uma tecnologia como: Http, gRPC ou GraphQL, Bancos de dados como SQL ou NoSql... Os servi\u00e7os externos conseguem se comunicar com o centro do hexagono por meio dos adaptadores. Ou seja, a fun\u00e7\u00e3o de um adaptador \u00e9 implementar uma conex\u00e3o entre uma porta e servi\u00e7os externos. Devemos ter pelo menos 2 adaptadores para uma porta: um para a implementa\u00e7\u00e3o real e outra para teste. Ex: servi\u00e7o de cache: um adaptador direciona para o servi\u00e7o real (redis e etc) e outro para um cache em mem\u00f3ria. Atores Fora do hexagono temos qualquer coisa que interaja com o sistema interno. Estas coisas podem ser seres humanos, dispositivo de hardware ou software, estes s\u00e3o os atores. Os atores podem ser condutores ou conduzidos: Condutores: Recebem chamadas vindas de fora do sistema. Ex: requisi\u00e7\u00e3o HTTP Conduzidos: Recebem chamadas vindas de dentro do sistema e a direcionam para um sistema externo. Ex: envio de smtp, comunica\u00e7\u00e3o com banco de dados e etc. Os condutores ficam do lado esquerdo do hexagono, j\u00e1 os conduzidos do lado direito. Fluxo de intera\u00e7\u00e3o Solicita\u00e7\u00e3o recebida pelo adaptador externo, este envia a adapta e envia a solicita\u00e7\u00e3o para uma porta de entrada a porta executa a l\u00f3gica de neg\u00f3cio e envia a resposta para outro adaptador externo O adaptador externo adapta e envia a resposta para a interface externa que originou a solicita\u00e7\u00e3o Neste cen\u00e1rio temos um problema, o centro depende do ator conduzido. Para resolver vamos usar o princ\u00edpio de invers\u00e3o de controle (IoC) Testes Em algumas abordagens \u00e9 dificil testar tudo conforme a pir\u00e2mide de testes: E2E, integra\u00e7\u00e3o, unidade (do topo \u00e0 base respectivamente). O foco desta arquitetura \u00e9 isolar toda a l\u00f3gica da aplica\u00e7\u00e3o no centro do hexagono sem depend\u00eancia de outras tecnologias, tornando-a mais f\u00e1cil de ser testada","title":"Arquitetura Hexagonal"},{"location":"software-architecture/hexagon_architecture/#arquitetura-hexagonal","text":"Separa\u00e7\u00e3o de Conceitos (separation of concerns): modularizar de forma que resolva um \u00fanico problema Modularizar em tr\u00eas \u00e1reas distintas e isoladas: Centro do hexagono Lado superior esquerdo do hexagono Lado inferior direito do hexagono Reusabilidade de c\u00f3digo alta coes\u00e3o baixo acoplamento independ\u00eancia de tecnologia","title":"Arquitetura Hexagonal"},{"location":"software-architecture/hexagon_architecture/#centro-do-hexagono","text":"Temos o motivo do nosso software existir, chamamos de core.","title":"Centro do Hexagono"},{"location":"software-architecture/hexagon_architecture/#fora-do-hexagono","text":"Temos os adaptadores, que permitem que as tecnologias que est\u00e3o fora do centro cheguem no centro sem contamin\u00e1-lo.","title":"Fora do Hexagono"},{"location":"software-architecture/hexagon_architecture/#portas-e-adaptadores","text":"Cada lado do hexagono representa o mesmo que uma porta e os objetos entre a porta e o centro s\u00e3o adaptadores. Porta: Conceito l\u00f3gico que define um ponto de entrada e sa\u00edda de uma aplica\u00e7\u00e3o. De acordo com o prof Marco Tulio Valente, no livro Engenharia de Software Moderna, existem 2 tipos de portas: Entrada: interfaces para comunica\u00e7\u00e3o de fora para dentro. Quando uma classe externa precisa chamar uma classe interna Sa\u00edda: interfaces para comunica\u00e7\u00e3o de dentro para fora. Quando uma classe do core precisa chamar um m\u00e9todo de uma classe externa. Estas portas declaram os servi\u00e7os requeridos pelo sistema - servi\u00e7os do mundo externo, que s\u00e3o necess\u00e1rios para o funcionamento do interno. Ex: comunica\u00e7\u00e3o com um banco de dados. Estas portas independem de tecnologia, por isto est\u00e3o do lado interno (mas n\u00e3o no centro). J\u00e1 os servi\u00e7os externos est\u00e3o ligados a uma tecnologia como: Http, gRPC ou GraphQL, Bancos de dados como SQL ou NoSql... Os servi\u00e7os externos conseguem se comunicar com o centro do hexagono por meio dos adaptadores. Ou seja, a fun\u00e7\u00e3o de um adaptador \u00e9 implementar uma conex\u00e3o entre uma porta e servi\u00e7os externos. Devemos ter pelo menos 2 adaptadores para uma porta: um para a implementa\u00e7\u00e3o real e outra para teste. Ex: servi\u00e7o de cache: um adaptador direciona para o servi\u00e7o real (redis e etc) e outro para um cache em mem\u00f3ria.","title":"Portas e Adaptadores"},{"location":"software-architecture/hexagon_architecture/#atores","text":"Fora do hexagono temos qualquer coisa que interaja com o sistema interno. Estas coisas podem ser seres humanos, dispositivo de hardware ou software, estes s\u00e3o os atores. Os atores podem ser condutores ou conduzidos: Condutores: Recebem chamadas vindas de fora do sistema. Ex: requisi\u00e7\u00e3o HTTP Conduzidos: Recebem chamadas vindas de dentro do sistema e a direcionam para um sistema externo. Ex: envio de smtp, comunica\u00e7\u00e3o com banco de dados e etc. Os condutores ficam do lado esquerdo do hexagono, j\u00e1 os conduzidos do lado direito.","title":"Atores"},{"location":"software-architecture/hexagon_architecture/#fluxo-de-interacao","text":"Solicita\u00e7\u00e3o recebida pelo adaptador externo, este envia a adapta e envia a solicita\u00e7\u00e3o para uma porta de entrada a porta executa a l\u00f3gica de neg\u00f3cio e envia a resposta para outro adaptador externo O adaptador externo adapta e envia a resposta para a interface externa que originou a solicita\u00e7\u00e3o Neste cen\u00e1rio temos um problema, o centro depende do ator conduzido. Para resolver vamos usar o princ\u00edpio de invers\u00e3o de controle (IoC)","title":"Fluxo de intera\u00e7\u00e3o"},{"location":"software-architecture/hexagon_architecture/#testes","text":"Em algumas abordagens \u00e9 dificil testar tudo conforme a pir\u00e2mide de testes: E2E, integra\u00e7\u00e3o, unidade (do topo \u00e0 base respectivamente). O foco desta arquitetura \u00e9 isolar toda a l\u00f3gica da aplica\u00e7\u00e3o no centro do hexagono sem depend\u00eancia de outras tecnologias, tornando-a mais f\u00e1cil de ser testada","title":"Testes"},{"location":"software-architecture/introduction/","text":"Introdu\u00e7\u00e3o \u00e0 arquitetura de software Fatores a serem considerados na constru\u00e7\u00e3o de uma AS: - requisitos de neg\u00f3cio - restri\u00e7\u00f5es de tempo - restri\u00e7\u00f5es de or\u00e7amento V\u00e1rias abordagens diferentes podem ser utilizadas, como: - baseada em camadas - baseada em componentes - baseada em servi\u00e7os Arquitetar para que o software n\u00e3o precise ser reescrito a cada mudan\u00e7a que seja necess\u00e1ria Primeiro passo: entrevista com os stakeholders levantar todos os pontos e entender as dores. Arquitetura Limpa Principais pontos: - Separa\u00e7\u00e3o de preocupa\u00e7\u00f5es - Respons\u00e1bilidade \u00fanica - Abstra\u00e7\u00e3o - Depura\u00e7\u00e3o f\u00e1cil - Simplicidade Design Patterns 3 categorias: criacionais, estruturais e padr\u00f5es de comportamento Criacionais Factory: interface para criar objetos em uma classe base sem especificar as classes concretas Builder: separa a cria\u00e7\u00e3o de um objeto complexo da sua representa\u00e7\u00e3o Singleton: permite apenas uma instancia do obj Prototype: permite clonagem de objs Estruturais Subdivididos em 3 categorias: adapta\u00e7\u00e3o, agrega\u00e7\u00e3o e composi\u00e7\u00e3o. Adapta\u00e7\u00e3o Adapter: objs com interfaces incompat\u00edveis trabalhem juntos Bridge: separa abstra\u00e7\u00e3o da implementa\u00e7\u00e3o Proxy: um obj representante controla outro Agrega\u00e7\u00e3o Composite: compoe objs em estrutura de arvores - hierarquia Decorator: responsabilidades adicionais dinamicamente Fa\u00e7ade: interface simplificada para um conjunto de interfaces complexas Composi\u00e7\u00e3o Flyweight: compartilha partes de objs para economizar mem\u00f3ria Private class Data: protege integridade de dados adicionando eles em uma class privada Padr\u00f5es Comportamentais De Classe Template Method: Define esqueleto do algoritmo que pode ser substitu\u00eddo Strategy: define uma fam\u00edlia de algor\u00edtmos que s\u00e3o intercambiaveis State: o obj muda de comportamento conforme seu estado interno muda De Objeto Observer: Dependencia 1:N, conforme o 1 muda de estado os outros s\u00e3o notificados e atualizados Chain of Responsability: Permite que um obj seja processado em cadeia Command: Solicita\u00e7\u00e3o como obj, habilita desfazer e refazer De intera\u00e7\u00e3o Interpreter: Interpretador de uma linguagem Mediator: define um mediador para diminuir o acoplamento entre objs. Todos se comunicam por meio do mediador Visitor: adicione novas opera\u00e7\u00f5es a um obj sem modificar os objs Arquitetura de Camadas Divide a constru\u00e7\u00e3o do software em camadas l\u00f3gicas, geralmente em pilha, onde as inferiores fornecem servi\u00e7os para as superiores. Camadas mais comuns: - Presentation: Camada de UI, intera\u00e7\u00e3o com o usu\u00e1rio - Application: Camada onde temos as l\u00f3gicas de neg\u00f3cio - Persist Data: Camada que faz a persistencia de dados","title":"Introdu\u00e7\u00e3o \u00e0 arquitetura de software"},{"location":"software-architecture/introduction/#introducao-a-arquitetura-de-software","text":"Fatores a serem considerados na constru\u00e7\u00e3o de uma AS: - requisitos de neg\u00f3cio - restri\u00e7\u00f5es de tempo - restri\u00e7\u00f5es de or\u00e7amento V\u00e1rias abordagens diferentes podem ser utilizadas, como: - baseada em camadas - baseada em componentes - baseada em servi\u00e7os Arquitetar para que o software n\u00e3o precise ser reescrito a cada mudan\u00e7a que seja necess\u00e1ria Primeiro passo: entrevista com os stakeholders levantar todos os pontos e entender as dores.","title":"Introdu\u00e7\u00e3o \u00e0 arquitetura de software"},{"location":"software-architecture/introduction/#arquitetura-limpa","text":"Principais pontos: - Separa\u00e7\u00e3o de preocupa\u00e7\u00f5es - Respons\u00e1bilidade \u00fanica - Abstra\u00e7\u00e3o - Depura\u00e7\u00e3o f\u00e1cil - Simplicidade","title":"Arquitetura Limpa"},{"location":"software-architecture/introduction/#design-patterns","text":"3 categorias: criacionais, estruturais e padr\u00f5es de comportamento","title":"Design Patterns"},{"location":"software-architecture/introduction/#criacionais","text":"Factory: interface para criar objetos em uma classe base sem especificar as classes concretas Builder: separa a cria\u00e7\u00e3o de um objeto complexo da sua representa\u00e7\u00e3o Singleton: permite apenas uma instancia do obj Prototype: permite clonagem de objs","title":"Criacionais"},{"location":"software-architecture/introduction/#estruturais","text":"Subdivididos em 3 categorias: adapta\u00e7\u00e3o, agrega\u00e7\u00e3o e composi\u00e7\u00e3o.","title":"Estruturais"},{"location":"software-architecture/introduction/#adaptacao","text":"Adapter: objs com interfaces incompat\u00edveis trabalhem juntos Bridge: separa abstra\u00e7\u00e3o da implementa\u00e7\u00e3o Proxy: um obj representante controla outro","title":"Adapta\u00e7\u00e3o"},{"location":"software-architecture/introduction/#agregacao","text":"Composite: compoe objs em estrutura de arvores - hierarquia Decorator: responsabilidades adicionais dinamicamente Fa\u00e7ade: interface simplificada para um conjunto de interfaces complexas","title":"Agrega\u00e7\u00e3o"},{"location":"software-architecture/introduction/#composicao","text":"Flyweight: compartilha partes de objs para economizar mem\u00f3ria Private class Data: protege integridade de dados adicionando eles em uma class privada","title":"Composi\u00e7\u00e3o"},{"location":"software-architecture/introduction/#padroes-comportamentais","text":"","title":"Padr\u00f5es Comportamentais"},{"location":"software-architecture/introduction/#de-classe","text":"Template Method: Define esqueleto do algoritmo que pode ser substitu\u00eddo Strategy: define uma fam\u00edlia de algor\u00edtmos que s\u00e3o intercambiaveis State: o obj muda de comportamento conforme seu estado interno muda","title":"De Classe"},{"location":"software-architecture/introduction/#de-objeto","text":"Observer: Dependencia 1:N, conforme o 1 muda de estado os outros s\u00e3o notificados e atualizados Chain of Responsability: Permite que um obj seja processado em cadeia Command: Solicita\u00e7\u00e3o como obj, habilita desfazer e refazer","title":"De Objeto"},{"location":"software-architecture/introduction/#de-interacao","text":"Interpreter: Interpretador de uma linguagem Mediator: define um mediador para diminuir o acoplamento entre objs. Todos se comunicam por meio do mediador Visitor: adicione novas opera\u00e7\u00f5es a um obj sem modificar os objs","title":"De intera\u00e7\u00e3o"},{"location":"software-architecture/introduction/#arquitetura-de-camadas","text":"Divide a constru\u00e7\u00e3o do software em camadas l\u00f3gicas, geralmente em pilha, onde as inferiores fornecem servi\u00e7os para as superiores. Camadas mais comuns: - Presentation: Camada de UI, intera\u00e7\u00e3o com o usu\u00e1rio - Application: Camada onde temos as l\u00f3gicas de neg\u00f3cio - Persist Data: Camada que faz a persistencia de dados","title":"Arquitetura de Camadas"},{"location":"software-architecture/process_and_modularization/","text":"Processo e Modulariza\u00e7\u00e3o Processos Entrevistas com Stakeholders O ponto inicial da descoberta \u00e9 a entrevista com os stakeholders, onde ser\u00e3o levantadas as dores e objetivos que precisam ser atingidos para obter sucesso. N\u00e3o \u00e9 neste ponto que iremos pensar em tecnologia, mas sim no que precisa ser constru\u00eddo (e n\u00e3o o \"como\"), or\u00e7amento e viabilidade. Levantamento por Observa\u00e7\u00e3o Observar como os usu\u00e1rios trabalham Grupos Focais Reunir grupos para realizar o brainstorming Prototipagem Criar prot\u00f3tipos para obter feedbacks dos usu\u00e1rios Modulariza\u00e7\u00e3o Separar o sistema em partes, assim fica mais f\u00e1cil paralelizar o desenvolvimento e manuten\u00e7\u00e3o.","title":"Processo e Modulariza\u00e7\u00e3o"},{"location":"software-architecture/process_and_modularization/#processo-e-modularizacao","text":"","title":"Processo e Modulariza\u00e7\u00e3o"},{"location":"software-architecture/process_and_modularization/#processos","text":"","title":"Processos"},{"location":"software-architecture/process_and_modularization/#entrevistas-com-stakeholders","text":"O ponto inicial da descoberta \u00e9 a entrevista com os stakeholders, onde ser\u00e3o levantadas as dores e objetivos que precisam ser atingidos para obter sucesso. N\u00e3o \u00e9 neste ponto que iremos pensar em tecnologia, mas sim no que precisa ser constru\u00eddo (e n\u00e3o o \"como\"), or\u00e7amento e viabilidade.","title":"Entrevistas com Stakeholders"},{"location":"software-architecture/process_and_modularization/#levantamento-por-observacao","text":"Observar como os usu\u00e1rios trabalham","title":"Levantamento por Observa\u00e7\u00e3o"},{"location":"software-architecture/process_and_modularization/#grupos-focais","text":"Reunir grupos para realizar o brainstorming","title":"Grupos Focais"},{"location":"software-architecture/process_and_modularization/#prototipagem","text":"Criar prot\u00f3tipos para obter feedbacks dos usu\u00e1rios","title":"Prototipagem"},{"location":"software-architecture/process_and_modularization/#modularizacao","text":"Separar o sistema em partes, assim fica mais f\u00e1cil paralelizar o desenvolvimento e manuten\u00e7\u00e3o.","title":"Modulariza\u00e7\u00e3o"},{"location":"software-architecture/scalability_availability_and_performance/","text":"Escalabilidade, Disponibilidade e Desempenho Escalabilidade A caracter\u00edstica que permite o software crescer para lidar com maiores demandas de trabalho Estrat\u00e9gias para tornar o software escal\u00e1vel: - Arquitetura projetada para suportar aumento de demanda - Seguir boas pr\u00e1ticas de c\u00f3digo - Utilizar tecnologias modernas como Cloud Computing e Cont\u00eaineres - Banco de dados Escal\u00e1vel como NoSql e Cache - Monitorar e otimizar Monitora\u00e7\u00e3o Ferramentas: - New Relic: an\u00e1lise de desempenho - Nagios: monitora\u00e7\u00e3o de servi\u00e7os de rede, open source e alertas - Splunk: an\u00e1lise e intelig\u00eancia de dados, pode ser usado para monitorar logs - AppDynamics: monitoramento e an\u00e1lise de desempenho - VisualVM: monitoramento de desempenho - Zabbix: Ferramenta de software de c\u00f3digo aberto para monitorar a infraestrutura de TI, como redes, servidores, m\u00e1quinas virtuais e servi\u00e7os em nuvem - Prometheus com Grafana: Prometheus coleta m\u00e9tricas de utiliza\u00e7\u00e3o da plataforma, j\u00e1 o grafana exibe de forma mais confort\u00e1vel e configur\u00e1vel (UI) HealthCheck Disponibilizar entrypoints para verifica\u00e7\u00e3o da sa\u00fade do servi\u00e7o, incluindo a esteira toda dele, como: verificar se o banco de dados est\u00e1 funcionando, cache e etc. Escalabilidade Horizontal vs Vertical Horizontal: Capacidade de aumentar o n\u00famero de inst\u00e2ncias (replica\u00e7\u00f5es) do servi\u00e7o e continuar operando corretamente Vertical: Capacidade de aumentar a disponibilidade de recursos computacionais para a mesma inst\u00e2ncia (mem\u00f3ria, cpu e etc) Disponibilidade Refere-se \u00e0 capacidade de um sistema estar operacional a todo momento para que o usu\u00e1rio o opere \u00c9 medida em termos de tempo de atividade: tempo que est\u00e1 dispon\u00edvel VS tempo total Observabilidade Capacidade do sistema de ser observ\u00e1vel, o que permite detectar anomalias e agir proativamente na resolu\u00e7\u00e3o. Desempenho Capacidade do sistema em realizar as tarefas a qual se prop\u00f5e a realizar em tempo h\u00e1bil, conforme expectativa. Pode ser medido como: - Tempo de resposta - Taxa de transfer\u00eancia - Utiliza\u00e7\u00e3o de Recursos - Confiabilidade - Escalabilidade Cache Para melhorar o desempenho do aplicativo, uma das estrat\u00e9gias \u00e9 armazenar temporariamente o resultado de dados que levam um tempo maior para serem processados, diminuindo a carga de trabalho e retornando mais rapidamente. Estrat\u00e9gias comuns: - Cache de p\u00e1gina inteira - Cache de banco de dados - Cache de imagem - Cache de sess\u00e3o - Cache de CDN (rede de entrega de conte\u00fado)","title":"Escalabilidade, Disponibilidade e Desempenho"},{"location":"software-architecture/scalability_availability_and_performance/#escalabilidade-disponibilidade-e-desempenho","text":"","title":"Escalabilidade, Disponibilidade e Desempenho"},{"location":"software-architecture/scalability_availability_and_performance/#escalabilidade","text":"A caracter\u00edstica que permite o software crescer para lidar com maiores demandas de trabalho Estrat\u00e9gias para tornar o software escal\u00e1vel: - Arquitetura projetada para suportar aumento de demanda - Seguir boas pr\u00e1ticas de c\u00f3digo - Utilizar tecnologias modernas como Cloud Computing e Cont\u00eaineres - Banco de dados Escal\u00e1vel como NoSql e Cache - Monitorar e otimizar","title":"Escalabilidade"},{"location":"software-architecture/scalability_availability_and_performance/#monitoracao","text":"Ferramentas: - New Relic: an\u00e1lise de desempenho - Nagios: monitora\u00e7\u00e3o de servi\u00e7os de rede, open source e alertas - Splunk: an\u00e1lise e intelig\u00eancia de dados, pode ser usado para monitorar logs - AppDynamics: monitoramento e an\u00e1lise de desempenho - VisualVM: monitoramento de desempenho - Zabbix: Ferramenta de software de c\u00f3digo aberto para monitorar a infraestrutura de TI, como redes, servidores, m\u00e1quinas virtuais e servi\u00e7os em nuvem - Prometheus com Grafana: Prometheus coleta m\u00e9tricas de utiliza\u00e7\u00e3o da plataforma, j\u00e1 o grafana exibe de forma mais confort\u00e1vel e configur\u00e1vel (UI)","title":"Monitora\u00e7\u00e3o"},{"location":"software-architecture/scalability_availability_and_performance/#healthcheck","text":"Disponibilizar entrypoints para verifica\u00e7\u00e3o da sa\u00fade do servi\u00e7o, incluindo a esteira toda dele, como: verificar se o banco de dados est\u00e1 funcionando, cache e etc.","title":"HealthCheck"},{"location":"software-architecture/scalability_availability_and_performance/#escalabilidade-horizontal-vs-vertical","text":"Horizontal: Capacidade de aumentar o n\u00famero de inst\u00e2ncias (replica\u00e7\u00f5es) do servi\u00e7o e continuar operando corretamente Vertical: Capacidade de aumentar a disponibilidade de recursos computacionais para a mesma inst\u00e2ncia (mem\u00f3ria, cpu e etc)","title":"Escalabilidade Horizontal vs Vertical"},{"location":"software-architecture/scalability_availability_and_performance/#disponibilidade","text":"Refere-se \u00e0 capacidade de um sistema estar operacional a todo momento para que o usu\u00e1rio o opere \u00c9 medida em termos de tempo de atividade: tempo que est\u00e1 dispon\u00edvel VS tempo total","title":"Disponibilidade"},{"location":"software-architecture/scalability_availability_and_performance/#observabilidade","text":"Capacidade do sistema de ser observ\u00e1vel, o que permite detectar anomalias e agir proativamente na resolu\u00e7\u00e3o.","title":"Observabilidade"},{"location":"software-architecture/scalability_availability_and_performance/#desempenho","text":"Capacidade do sistema em realizar as tarefas a qual se prop\u00f5e a realizar em tempo h\u00e1bil, conforme expectativa. Pode ser medido como: - Tempo de resposta - Taxa de transfer\u00eancia - Utiliza\u00e7\u00e3o de Recursos - Confiabilidade - Escalabilidade","title":"Desempenho"},{"location":"software-architecture/scalability_availability_and_performance/#cache","text":"Para melhorar o desempenho do aplicativo, uma das estrat\u00e9gias \u00e9 armazenar temporariamente o resultado de dados que levam um tempo maior para serem processados, diminuindo a carga de trabalho e retornando mais rapidamente. Estrat\u00e9gias comuns: - Cache de p\u00e1gina inteira - Cache de banco de dados - Cache de imagem - Cache de sess\u00e3o - Cache de CDN (rede de entrega de conte\u00fado)","title":"Cache"},{"location":"tools/","text":"Indica\u00e7\u00f5es de Ferramentas Domain Story Telling Egon.Io","title":"Indica\u00e7\u00f5es de Ferramentas"},{"location":"tools/#indicacoes-de-ferramentas","text":"","title":"Indica\u00e7\u00f5es de Ferramentas"},{"location":"tools/#domain-story-telling","text":"Egon.Io","title":"Domain Story Telling"}]}